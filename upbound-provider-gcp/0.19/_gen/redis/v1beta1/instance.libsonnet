{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='instance', url='', help='"Instance is the Schema for the Instances API. A Google Cloud Redis instance."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of Instance', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'redis.gcp.upbound.io/v1beta1',
    kind: 'Instance',
  } + self.metadata.withName(name=name) + self.metadata.withAnnotations(annotations={
    'tanka.dev/namespaced': 'false',
  }),
  '#spec':: d.obj(help='"InstanceSpec defines the desired state of Instance"'),
  spec: {
    '#forProvider':: d.obj(help=''),
    forProvider: {
      '#maintenancePolicy':: d.obj(help='"Maintenance policy for an instance. Structure is documented below."'),
      maintenancePolicy: {
        '#weeklyMaintenanceWindow':: d.obj(help='"Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one. Structure is documented below."'),
        weeklyMaintenanceWindow: {
          '#startTime':: d.obj(help='"Required. Start time of the window in UTC time. Structure is documented below."'),
          startTime: {
            '#withHours':: d.fn(help='"Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \\"24:00:00\\" for scenarios like business closing time."', args=[d.arg(name='hours', type=d.T.number)]),
            withHours(hours): { hours: hours },
            '#withMinutes':: d.fn(help='"Minutes of hour of day. Must be from 0 to 59."', args=[d.arg(name='minutes', type=d.T.number)]),
            withMinutes(minutes): { minutes: minutes },
            '#withNanos':: d.fn(help='"Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999."', args=[d.arg(name='nanos', type=d.T.number)]),
            withNanos(nanos): { nanos: nanos },
            '#withSeconds':: d.fn(help='"Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds."', args=[d.arg(name='seconds', type=d.T.number)]),
            withSeconds(seconds): { seconds: seconds },
          },
          '#withDay':: d.fn(help='"Required. The day of week that maintenance updates occur."', args=[d.arg(name='day', type=d.T.string)]),
          withDay(day): { day: day },
          '#withStartTime':: d.fn(help='"Required. Start time of the window in UTC time. Structure is documented below."', args=[d.arg(name='startTime', type=d.T.array)]),
          withStartTime(startTime): { startTime: if std.isArray(v=startTime) then startTime else [startTime] },
          '#withStartTimeMixin':: d.fn(help='"Required. Start time of the window in UTC time. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='startTime', type=d.T.array)]),
          withStartTimeMixin(startTime): { startTime+: if std.isArray(v=startTime) then startTime else [startTime] },
        },
        '#withDescription':: d.fn(help='"Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512."', args=[d.arg(name='description', type=d.T.string)]),
        withDescription(description): { description: description },
        '#withWeeklyMaintenanceWindow':: d.fn(help='"Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one. Structure is documented below."', args=[d.arg(name='weeklyMaintenanceWindow', type=d.T.array)]),
        withWeeklyMaintenanceWindow(weeklyMaintenanceWindow): { weeklyMaintenanceWindow: if std.isArray(v=weeklyMaintenanceWindow) then weeklyMaintenanceWindow else [weeklyMaintenanceWindow] },
        '#withWeeklyMaintenanceWindowMixin':: d.fn(help='"Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='weeklyMaintenanceWindow', type=d.T.array)]),
        withWeeklyMaintenanceWindowMixin(weeklyMaintenanceWindow): { weeklyMaintenanceWindow+: if std.isArray(v=weeklyMaintenanceWindow) then weeklyMaintenanceWindow else [weeklyMaintenanceWindow] },
      },
      '#withAlternativeLocationId':: d.fn(help='"Only applicable to STANDARD_HA tier which protects the instance against zonal failures by provisioning it across two zones. If provided, it must be a different zone from the one provided in [locationId]."', args=[d.arg(name='alternativeLocationId', type=d.T.string)]),
      withAlternativeLocationId(alternativeLocationId): { spec+: { forProvider+: { alternativeLocationId: alternativeLocationId } } },
      '#withAuthEnabled':: d.fn(help='"Optional. Indicates whether OSS Redis AUTH is enabled for the instance. If set to \\"true\\" AUTH is enabled on the instance. Default value is \\"false\\" meaning AUTH is disabled."', args=[d.arg(name='authEnabled', type=d.T.boolean)]),
      withAuthEnabled(authEnabled): { spec+: { forProvider+: { authEnabled: authEnabled } } },
      '#withAuthorizedNetwork':: d.fn(help='"The full name of the Google Compute Engine network to which the instance is connected. If left unspecified, the default network will be used."', args=[d.arg(name='authorizedNetwork', type=d.T.string)]),
      withAuthorizedNetwork(authorizedNetwork): { spec+: { forProvider+: { authorizedNetwork: authorizedNetwork } } },
      '#withConnectMode':: d.fn(help='"The connection mode of the Redis instance. Default value is DIRECT_PEERING. Possible values are DIRECT_PEERING and PRIVATE_SERVICE_ACCESS."', args=[d.arg(name='connectMode', type=d.T.string)]),
      withConnectMode(connectMode): { spec+: { forProvider+: { connectMode: connectMode } } },
      '#withDisplayName':: d.fn(help='"An arbitrary and optional user-provided name for the instance."', args=[d.arg(name='displayName', type=d.T.string)]),
      withDisplayName(displayName): { spec+: { forProvider+: { displayName: displayName } } },
      '#withLabels':: d.fn(help='"Resource labels to represent user provided metadata."', args=[d.arg(name='labels', type=d.T.object)]),
      withLabels(labels): { spec+: { forProvider+: { labels: labels } } },
      '#withLabelsMixin':: d.fn(help='"Resource labels to represent user provided metadata."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
      withLabelsMixin(labels): { spec+: { forProvider+: { labels+: labels } } },
      '#withLocationId':: d.fn(help='"The zone where the instance will be provisioned. If not provided, the service will choose a zone for the instance. For STANDARD_HA tier, instances will be created across two zones for protection against zonal failures. If [alternativeLocationId] is also provided, it must be different from [locationId]."', args=[d.arg(name='locationId', type=d.T.string)]),
      withLocationId(locationId): { spec+: { forProvider+: { locationId: locationId } } },
      '#withMaintenancePolicy':: d.fn(help='"Maintenance policy for an instance. Structure is documented below."', args=[d.arg(name='maintenancePolicy', type=d.T.array)]),
      withMaintenancePolicy(maintenancePolicy): { spec+: { forProvider+: { maintenancePolicy: if std.isArray(v=maintenancePolicy) then maintenancePolicy else [maintenancePolicy] } } },
      '#withMaintenancePolicyMixin':: d.fn(help='"Maintenance policy for an instance. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='maintenancePolicy', type=d.T.array)]),
      withMaintenancePolicyMixin(maintenancePolicy): { spec+: { forProvider+: { maintenancePolicy+: if std.isArray(v=maintenancePolicy) then maintenancePolicy else [maintenancePolicy] } } },
      '#withMaintenanceSchedule':: d.fn(help='"Upcoming maintenance schedule. Structure is documented below."', args=[d.arg(name='maintenanceSchedule', type=d.T.array)]),
      withMaintenanceSchedule(maintenanceSchedule): { spec+: { forProvider+: { maintenanceSchedule: if std.isArray(v=maintenanceSchedule) then maintenanceSchedule else [maintenanceSchedule] } } },
      '#withMaintenanceScheduleMixin':: d.fn(help='"Upcoming maintenance schedule. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='maintenanceSchedule', type=d.T.array)]),
      withMaintenanceScheduleMixin(maintenanceSchedule): { spec+: { forProvider+: { maintenanceSchedule+: if std.isArray(v=maintenanceSchedule) then maintenanceSchedule else [maintenanceSchedule] } } },
      '#withMemorySizeGb':: d.fn(help='"Redis memory size in GiB."', args=[d.arg(name='memorySizeGb', type=d.T.number)]),
      withMemorySizeGb(memorySizeGb): { spec+: { forProvider+: { memorySizeGb: memorySizeGb } } },
      '#withProject':: d.fn(help='"The ID of the project in which the resource belongs. If it is not provided, the provider project is used."', args=[d.arg(name='project', type=d.T.string)]),
      withProject(project): { spec+: { forProvider+: { project: project } } },
      '#withReadReplicasMode':: d.fn(help='"Optional. Read replica mode. Can only be specified when trying to create the instance. If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED."', args=[d.arg(name='readReplicasMode', type=d.T.string)]),
      withReadReplicasMode(readReplicasMode): { spec+: { forProvider+: { readReplicasMode: readReplicasMode } } },
      '#withRedisConfigs':: d.fn(help='"Redis configuration parameters, according to http://redis.io/topics/config. Please check Memorystore documentation for the list of supported parameters: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs"', args=[d.arg(name='redisConfigs', type=d.T.object)]),
      withRedisConfigs(redisConfigs): { spec+: { forProvider+: { redisConfigs: redisConfigs } } },
      '#withRedisConfigsMixin':: d.fn(help='"Redis configuration parameters, according to http://redis.io/topics/config. Please check Memorystore documentation for the list of supported parameters: https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='redisConfigs', type=d.T.object)]),
      withRedisConfigsMixin(redisConfigs): { spec+: { forProvider+: { redisConfigs+: redisConfigs } } },
      '#withRedisVersion':: d.fn(help='"The version of Redis software. If not provided, latest supported version will be used. Please check the API documentation linked at the top for the latest valid values."', args=[d.arg(name='redisVersion', type=d.T.string)]),
      withRedisVersion(redisVersion): { spec+: { forProvider+: { redisVersion: redisVersion } } },
      '#withRegion':: d.fn(help='"The name of the Redis region of the instance."', args=[d.arg(name='region', type=d.T.string)]),
      withRegion(region): { spec+: { forProvider+: { region: region } } },
      '#withReplicaCount':: d.fn(help='"Optional. The number of replica nodes. The valid range for the Standard Tier with read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled for a Standard Tier instance, the only valid value is 1 and the default is 1. The valid value for basic tier is 0 and the default is also 0."', args=[d.arg(name='replicaCount', type=d.T.number)]),
      withReplicaCount(replicaCount): { spec+: { forProvider+: { replicaCount: replicaCount } } },
      '#withReservedIpRange':: d.fn(help='"The CIDR range of internal addresses that are reserved for this instance. If not provided, the service will choose an unused /29 block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be unique and non-overlapping with existing subnets in an authorized network."', args=[d.arg(name='reservedIpRange', type=d.T.string)]),
      withReservedIpRange(reservedIpRange): { spec+: { forProvider+: { reservedIpRange: reservedIpRange } } },
      '#withSecondaryIpRange':: d.fn(help='"Optional. Additional IP range for node placement. Required when enabling read replicas on an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or \\"auto\\". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address range associated with the private service access connection, or \\"auto\\"."', args=[d.arg(name='secondaryIpRange', type=d.T.string)]),
      withSecondaryIpRange(secondaryIpRange): { spec+: { forProvider+: { secondaryIpRange: secondaryIpRange } } },
      '#withTier':: d.fn(help='"The service tier of the instance. Must be one of these values:"', args=[d.arg(name='tier', type=d.T.string)]),
      withTier(tier): { spec+: { forProvider+: { tier: tier } } },
      '#withTransitEncryptionMode':: d.fn(help='"The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance."', args=[d.arg(name='transitEncryptionMode', type=d.T.string)]),
      withTransitEncryptionMode(transitEncryptionMode): { spec+: { forProvider+: { transitEncryptionMode: transitEncryptionMode } } },
    },
    '#providerConfigRef':: d.obj(help='"ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured."'),
    providerConfigRef: {
      '#policy':: d.obj(help='"Policies for referencing."'),
      policy: {
        '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
        withResolution(resolution): { spec+: { providerConfigRef+: { policy+: { resolution: resolution } } } },
        '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
        withResolve(resolve): { spec+: { providerConfigRef+: { policy+: { resolve: resolve } } } },
      },
      '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { providerConfigRef+: { name: name } } },
    },
    '#providerRef':: d.obj(help='"ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`"'),
    providerRef: {
      '#policy':: d.obj(help='"Policies for referencing."'),
      policy: {
        '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
        withResolution(resolution): { spec+: { providerRef+: { policy+: { resolution: resolution } } } },
        '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
        withResolve(resolve): { spec+: { providerRef+: { policy+: { resolve: resolve } } } },
      },
      '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { providerRef+: { name: name } } },
    },
    '#publishConnectionDetailsTo':: d.obj(help='"PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource."'),
    publishConnectionDetailsTo: {
      '#configRef':: d.obj(help='"SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret."'),
      configRef: {
        '#policy':: d.obj(help='"Policies for referencing."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { publishConnectionDetailsTo+: { configRef+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { publishConnectionDetailsTo+: { configRef+: { policy+: { resolve: resolve } } } } },
        },
        '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { publishConnectionDetailsTo+: { configRef+: { name: name } } } },
      },
      '#metadata':: d.obj(help='"Metadata is the metadata for connection secret."'),
      metadata: {
        '#withAnnotations':: d.fn(help='"Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.annotations\\". - It is up to Secret Store implementation for others store types."', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { publishConnectionDetailsTo+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='"Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.annotations\\". - It is up to Secret Store implementation for others store types."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { publishConnectionDetailsTo+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='"Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.labels\\". - It is up to Secret Store implementation for others store types."', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { publishConnectionDetailsTo+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='"Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.labels\\". - It is up to Secret Store implementation for others store types."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { publishConnectionDetailsTo+: { metadata+: { labels+: labels } } } },
        '#withType':: d.fn(help='"Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores."', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { publishConnectionDetailsTo+: { metadata+: { type: type } } } },
      },
      '#withName':: d.fn(help='"Name is the name of the connection secret."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { publishConnectionDetailsTo+: { name: name } } },
    },
    '#withDeletionPolicy':: d.fn(help='"DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \\"Delete\\" or \\"Orphan\\" the external resource."', args=[d.arg(name='deletionPolicy', type=d.T.string)]),
    withDeletionPolicy(deletionPolicy): { spec+: { deletionPolicy: deletionPolicy } },
    '#writeConnectionSecretToRef':: d.obj(help='"WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other."'),
    writeConnectionSecretToRef: {
      '#withName':: d.fn(help='"Name of the secret."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { writeConnectionSecretToRef+: { name: name } } },
      '#withNamespace':: d.fn(help='"Namespace of the secret."', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { spec+: { writeConnectionSecretToRef+: { namespace: namespace } } },
    },
  },
  '#mixin': 'ignore',
  mixin: self,
}
