{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='certificateAuthority', url='', help='"CertificateAuthority is the Schema for the CertificateAuthoritys API. A CertificateAuthority represents an individual Certificate Authority."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of CertificateAuthority', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'privateca.gcp.upbound.io/v1beta1',
    kind: 'CertificateAuthority',
  } + self.metadata.withName(name=name) + self.metadata.withAnnotations(annotations={
    'tanka.dev/namespaced': 'false',
  }),
  '#spec':: d.obj(help='"CertificateAuthoritySpec defines the desired state of CertificateAuthority"'),
  spec: {
    '#forProvider':: d.obj(help=''),
    forProvider: {
      '#config':: d.obj(help='"The config used to create a self-signed X.509 certificate or CSR. Structure is documented below."'),
      config: {
        '#subjectConfig':: d.obj(help='"Specifies some of the values in a certificate that are related to the subject. Structure is documented below."'),
        subjectConfig: {
          '#subject':: d.obj(help='"Contains distinguished name fields such as the location and organization. Structure is documented below."'),
          subject: {
            '#withCommonName':: d.fn(help='"The common name of the distinguished name."', args=[d.arg(name='commonName', type=d.T.string)]),
            withCommonName(commonName): { commonName: commonName },
            '#withCountryCode':: d.fn(help='"The country code of the subject."', args=[d.arg(name='countryCode', type=d.T.string)]),
            withCountryCode(countryCode): { countryCode: countryCode },
            '#withLocality':: d.fn(help='"The locality or city of the subject."', args=[d.arg(name='locality', type=d.T.string)]),
            withLocality(locality): { locality: locality },
            '#withOrganization':: d.fn(help='"The organization of the subject."', args=[d.arg(name='organization', type=d.T.string)]),
            withOrganization(organization): { organization: organization },
            '#withOrganizationalUnit':: d.fn(help='"The organizational unit of the subject."', args=[d.arg(name='organizationalUnit', type=d.T.string)]),
            withOrganizationalUnit(organizationalUnit): { organizationalUnit: organizationalUnit },
            '#withPostalCode':: d.fn(help='"The postal code of the subject."', args=[d.arg(name='postalCode', type=d.T.string)]),
            withPostalCode(postalCode): { postalCode: postalCode },
            '#withProvince':: d.fn(help='"The province, territory, or regional state of the subject."', args=[d.arg(name='province', type=d.T.string)]),
            withProvince(province): { province: province },
            '#withStreetAddress':: d.fn(help='"The street address of the subject."', args=[d.arg(name='streetAddress', type=d.T.string)]),
            withStreetAddress(streetAddress): { streetAddress: streetAddress },
          },
          '#subjectAltName':: d.obj(help='"The subject alternative name fields. Structure is documented below."'),
          subjectAltName: {
            '#withDnsNames':: d.fn(help='"Contains only valid, fully-qualified host names."', args=[d.arg(name='dnsNames', type=d.T.array)]),
            withDnsNames(dnsNames): { dnsNames: if std.isArray(v=dnsNames) then dnsNames else [dnsNames] },
            '#withDnsNamesMixin':: d.fn(help='"Contains only valid, fully-qualified host names."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dnsNames', type=d.T.array)]),
            withDnsNamesMixin(dnsNames): { dnsNames+: if std.isArray(v=dnsNames) then dnsNames else [dnsNames] },
            '#withEmailAddresses':: d.fn(help='"Contains only valid RFC 2822 E-mail addresses."', args=[d.arg(name='emailAddresses', type=d.T.array)]),
            withEmailAddresses(emailAddresses): { emailAddresses: if std.isArray(v=emailAddresses) then emailAddresses else [emailAddresses] },
            '#withEmailAddressesMixin':: d.fn(help='"Contains only valid RFC 2822 E-mail addresses."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='emailAddresses', type=d.T.array)]),
            withEmailAddressesMixin(emailAddresses): { emailAddresses+: if std.isArray(v=emailAddresses) then emailAddresses else [emailAddresses] },
            '#withIpAddresses':: d.fn(help='"Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses."', args=[d.arg(name='ipAddresses', type=d.T.array)]),
            withIpAddresses(ipAddresses): { ipAddresses: if std.isArray(v=ipAddresses) then ipAddresses else [ipAddresses] },
            '#withIpAddressesMixin':: d.fn(help='"Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipAddresses', type=d.T.array)]),
            withIpAddressesMixin(ipAddresses): { ipAddresses+: if std.isArray(v=ipAddresses) then ipAddresses else [ipAddresses] },
            '#withUris':: d.fn(help='"Contains only valid RFC 3986 URIs."', args=[d.arg(name='uris', type=d.T.array)]),
            withUris(uris): { uris: if std.isArray(v=uris) then uris else [uris] },
            '#withUrisMixin':: d.fn(help='"Contains only valid RFC 3986 URIs."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='uris', type=d.T.array)]),
            withUrisMixin(uris): { uris+: if std.isArray(v=uris) then uris else [uris] },
          },
          '#withSubject':: d.fn(help='"Contains distinguished name fields such as the location and organization. Structure is documented below."', args=[d.arg(name='subject', type=d.T.array)]),
          withSubject(subject): { subject: if std.isArray(v=subject) then subject else [subject] },
          '#withSubjectAltName':: d.fn(help='"The subject alternative name fields. Structure is documented below."', args=[d.arg(name='subjectAltName', type=d.T.array)]),
          withSubjectAltName(subjectAltName): { subjectAltName: if std.isArray(v=subjectAltName) then subjectAltName else [subjectAltName] },
          '#withSubjectAltNameMixin':: d.fn(help='"The subject alternative name fields. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='subjectAltName', type=d.T.array)]),
          withSubjectAltNameMixin(subjectAltName): { subjectAltName+: if std.isArray(v=subjectAltName) then subjectAltName else [subjectAltName] },
          '#withSubjectMixin':: d.fn(help='"Contains distinguished name fields such as the location and organization. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='subject', type=d.T.array)]),
          withSubjectMixin(subject): { subject+: if std.isArray(v=subject) then subject else [subject] },
        },
        '#withSubjectConfig':: d.fn(help='"Specifies some of the values in a certificate that are related to the subject. Structure is documented below."', args=[d.arg(name='subjectConfig', type=d.T.array)]),
        withSubjectConfig(subjectConfig): { subjectConfig: if std.isArray(v=subjectConfig) then subjectConfig else [subjectConfig] },
        '#withSubjectConfigMixin':: d.fn(help='"Specifies some of the values in a certificate that are related to the subject. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='subjectConfig', type=d.T.array)]),
        withSubjectConfigMixin(subjectConfig): { subjectConfig+: if std.isArray(v=subjectConfig) then subjectConfig else [subjectConfig] },
        '#withX509Config':: d.fn(help='"Describes how some of the technical X.509 fields in a certificate should be populated. Structure is documented below."', args=[d.arg(name='x509Config', type=d.T.array)]),
        withX509Config(x509Config): { x509Config: if std.isArray(v=x509Config) then x509Config else [x509Config] },
        '#withX509ConfigMixin':: d.fn(help='"Describes how some of the technical X.509 fields in a certificate should be populated. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='x509Config', type=d.T.array)]),
        withX509ConfigMixin(x509Config): { x509Config+: if std.isArray(v=x509Config) then x509Config else [x509Config] },
        '#x509Config':: d.obj(help='"Describes how some of the technical X.509 fields in a certificate should be populated. Structure is documented below."'),
        x509Config: {
          '#additionalExtensions':: d.obj(help='"Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs. Structure is documented below."'),
          additionalExtensions: {
            '#objectId':: d.obj(help='"Describes values that are relevant in a CA certificate. Structure is documented below."'),
            objectId: {
              '#withObjectIdPath':: d.fn(help='"An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages."', args=[d.arg(name='objectIdPath', type=d.T.array)]),
              withObjectIdPath(objectIdPath): { objectIdPath: if std.isArray(v=objectIdPath) then objectIdPath else [objectIdPath] },
              '#withObjectIdPathMixin':: d.fn(help='"An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='objectIdPath', type=d.T.array)]),
              withObjectIdPathMixin(objectIdPath): { objectIdPath+: if std.isArray(v=objectIdPath) then objectIdPath else [objectIdPath] },
            },
            '#withCritical':: d.fn(help='"Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error)."', args=[d.arg(name='critical', type=d.T.boolean)]),
            withCritical(critical): { critical: critical },
            '#withObjectId':: d.fn(help='"Describes values that are relevant in a CA certificate. Structure is documented below."', args=[d.arg(name='objectId', type=d.T.array)]),
            withObjectId(objectId): { objectId: if std.isArray(v=objectId) then objectId else [objectId] },
            '#withObjectIdMixin':: d.fn(help='"Describes values that are relevant in a CA certificate. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='objectId', type=d.T.array)]),
            withObjectIdMixin(objectId): { objectId+: if std.isArray(v=objectId) then objectId else [objectId] },
            '#withValue':: d.fn(help='"The value of this X.509 extension. A base64-encoded string."', args=[d.arg(name='value', type=d.T.string)]),
            withValue(value): { value: value },
          },
          '#caOptions':: d.obj(help='"Describes values that are relevant in a CA certificate. Structure is documented below."'),
          caOptions: {
            '#withIsCa':: d.fn(help='"When true, the \\"CA\\" in Basic Constraints extension will be set to true."', args=[d.arg(name='isCa', type=d.T.boolean)]),
            withIsCa(isCa): { isCa: isCa },
            '#withMaxIssuerPathLength':: d.fn(help='"Refers to the \\"path length constraint\\" in Basic Constraints extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail."', args=[d.arg(name='maxIssuerPathLength', type=d.T.number)]),
            withMaxIssuerPathLength(maxIssuerPathLength): { maxIssuerPathLength: maxIssuerPathLength },
            '#withNonCa':: d.fn(help='"When true, the \\"CA\\" in Basic Constraints extension will be set to false. If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate."', args=[d.arg(name='nonCa', type=d.T.boolean)]),
            withNonCa(nonCa): { nonCa: nonCa },
            '#withZeroMaxIssuerPathLength':: d.fn(help='"When true, the \\"path length constraint\\" in Basic Constraints extension will be set to 0. if both max_issuer_path_length and zero_max_issuer_path_length are unset, the max path length will be omitted from the CA certificate."', args=[d.arg(name='zeroMaxIssuerPathLength', type=d.T.boolean)]),
            withZeroMaxIssuerPathLength(zeroMaxIssuerPathLength): { zeroMaxIssuerPathLength: zeroMaxIssuerPathLength },
          },
          '#keyUsage':: d.obj(help='"Indicates the intended use for keys that correspond to a certificate. Structure is documented below."'),
          keyUsage: {
            '#baseKeyUsage':: d.obj(help='"Describes high-level ways in which a key may be used. Structure is documented below."'),
            baseKeyUsage: {
              '#withCertSign':: d.fn(help='"The key may be used to sign certificates."', args=[d.arg(name='certSign', type=d.T.boolean)]),
              withCertSign(certSign): { certSign: certSign },
              '#withContentCommitment':: d.fn(help='"The key may be used for cryptographic commitments. Note that this may also be referred to as \\"non-repudiation\\"."', args=[d.arg(name='contentCommitment', type=d.T.boolean)]),
              withContentCommitment(contentCommitment): { contentCommitment: contentCommitment },
              '#withCrlSign':: d.fn(help='"The key may be used sign certificate revocation lists."', args=[d.arg(name='crlSign', type=d.T.boolean)]),
              withCrlSign(crlSign): { crlSign: crlSign },
              '#withDataEncipherment':: d.fn(help='"The key may be used to encipher data."', args=[d.arg(name='dataEncipherment', type=d.T.boolean)]),
              withDataEncipherment(dataEncipherment): { dataEncipherment: dataEncipherment },
              '#withDecipherOnly':: d.fn(help='"The key may be used to decipher only."', args=[d.arg(name='decipherOnly', type=d.T.boolean)]),
              withDecipherOnly(decipherOnly): { decipherOnly: decipherOnly },
              '#withDigitalSignature':: d.fn(help='"The key may be used for digital signatures."', args=[d.arg(name='digitalSignature', type=d.T.boolean)]),
              withDigitalSignature(digitalSignature): { digitalSignature: digitalSignature },
              '#withEncipherOnly':: d.fn(help='"The key may be used to encipher only."', args=[d.arg(name='encipherOnly', type=d.T.boolean)]),
              withEncipherOnly(encipherOnly): { encipherOnly: encipherOnly },
              '#withKeyAgreement':: d.fn(help='"The key may be used in a key agreement protocol."', args=[d.arg(name='keyAgreement', type=d.T.boolean)]),
              withKeyAgreement(keyAgreement): { keyAgreement: keyAgreement },
              '#withKeyEncipherment':: d.fn(help='"The key may be used to encipher other keys."', args=[d.arg(name='keyEncipherment', type=d.T.boolean)]),
              withKeyEncipherment(keyEncipherment): { keyEncipherment: keyEncipherment },
            },
            '#extendedKeyUsage':: d.obj(help='"Describes high-level ways in which a key may be used. Structure is documented below."'),
            extendedKeyUsage: {
              '#withClientAuth':: d.fn(help='"Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as \\"TLS WWW client authentication\\", though regularly used for non-WWW TLS."', args=[d.arg(name='clientAuth', type=d.T.boolean)]),
              withClientAuth(clientAuth): { clientAuth: clientAuth },
              '#withCodeSigning':: d.fn(help='"Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as \\"Signing of downloadable executable code client authentication\\"."', args=[d.arg(name='codeSigning', type=d.T.boolean)]),
              withCodeSigning(codeSigning): { codeSigning: codeSigning },
              '#withEmailProtection':: d.fn(help='"Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as \\"Email protection\\"."', args=[d.arg(name='emailProtection', type=d.T.boolean)]),
              withEmailProtection(emailProtection): { emailProtection: emailProtection },
              '#withOcspSigning':: d.fn(help='"Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as \\"Signing OCSP responses\\"."', args=[d.arg(name='ocspSigning', type=d.T.boolean)]),
              withOcspSigning(ocspSigning): { ocspSigning: ocspSigning },
              '#withServerAuth':: d.fn(help='"Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as \\"TLS WWW server authentication\\", though regularly used for non-WWW TLS."', args=[d.arg(name='serverAuth', type=d.T.boolean)]),
              withServerAuth(serverAuth): { serverAuth: serverAuth },
              '#withTimeStamping':: d.fn(help='"Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as \\"Binding the hash of an object to a time\\"."', args=[d.arg(name='timeStamping', type=d.T.boolean)]),
              withTimeStamping(timeStamping): { timeStamping: timeStamping },
            },
            '#unknownExtendedKeyUsages':: d.obj(help='"An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages. Structure is documented below."'),
            unknownExtendedKeyUsages: {
              '#withObjectIdPath':: d.fn(help='"An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages."', args=[d.arg(name='objectIdPath', type=d.T.array)]),
              withObjectIdPath(objectIdPath): { objectIdPath: if std.isArray(v=objectIdPath) then objectIdPath else [objectIdPath] },
              '#withObjectIdPathMixin':: d.fn(help='"An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='objectIdPath', type=d.T.array)]),
              withObjectIdPathMixin(objectIdPath): { objectIdPath+: if std.isArray(v=objectIdPath) then objectIdPath else [objectIdPath] },
            },
            '#withBaseKeyUsage':: d.fn(help='"Describes high-level ways in which a key may be used. Structure is documented below."', args=[d.arg(name='baseKeyUsage', type=d.T.array)]),
            withBaseKeyUsage(baseKeyUsage): { baseKeyUsage: if std.isArray(v=baseKeyUsage) then baseKeyUsage else [baseKeyUsage] },
            '#withBaseKeyUsageMixin':: d.fn(help='"Describes high-level ways in which a key may be used. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='baseKeyUsage', type=d.T.array)]),
            withBaseKeyUsageMixin(baseKeyUsage): { baseKeyUsage+: if std.isArray(v=baseKeyUsage) then baseKeyUsage else [baseKeyUsage] },
            '#withExtendedKeyUsage':: d.fn(help='"Describes high-level ways in which a key may be used. Structure is documented below."', args=[d.arg(name='extendedKeyUsage', type=d.T.array)]),
            withExtendedKeyUsage(extendedKeyUsage): { extendedKeyUsage: if std.isArray(v=extendedKeyUsage) then extendedKeyUsage else [extendedKeyUsage] },
            '#withExtendedKeyUsageMixin':: d.fn(help='"Describes high-level ways in which a key may be used. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='extendedKeyUsage', type=d.T.array)]),
            withExtendedKeyUsageMixin(extendedKeyUsage): { extendedKeyUsage+: if std.isArray(v=extendedKeyUsage) then extendedKeyUsage else [extendedKeyUsage] },
            '#withUnknownExtendedKeyUsages':: d.fn(help='"An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages. Structure is documented below."', args=[d.arg(name='unknownExtendedKeyUsages', type=d.T.array)]),
            withUnknownExtendedKeyUsages(unknownExtendedKeyUsages): { unknownExtendedKeyUsages: if std.isArray(v=unknownExtendedKeyUsages) then unknownExtendedKeyUsages else [unknownExtendedKeyUsages] },
            '#withUnknownExtendedKeyUsagesMixin':: d.fn(help='"An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='unknownExtendedKeyUsages', type=d.T.array)]),
            withUnknownExtendedKeyUsagesMixin(unknownExtendedKeyUsages): { unknownExtendedKeyUsages+: if std.isArray(v=unknownExtendedKeyUsages) then unknownExtendedKeyUsages else [unknownExtendedKeyUsages] },
          },
          '#policyIds':: d.obj(help='"Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4. Structure is documented below."'),
          policyIds: {
            '#withObjectIdPath':: d.fn(help='"An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages."', args=[d.arg(name='objectIdPath', type=d.T.array)]),
            withObjectIdPath(objectIdPath): { objectIdPath: if std.isArray(v=objectIdPath) then objectIdPath else [objectIdPath] },
            '#withObjectIdPathMixin':: d.fn(help='"An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='objectIdPath', type=d.T.array)]),
            withObjectIdPathMixin(objectIdPath): { objectIdPath+: if std.isArray(v=objectIdPath) then objectIdPath else [objectIdPath] },
          },
          '#withAdditionalExtensions':: d.fn(help='"Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs. Structure is documented below."', args=[d.arg(name='additionalExtensions', type=d.T.array)]),
          withAdditionalExtensions(additionalExtensions): { additionalExtensions: if std.isArray(v=additionalExtensions) then additionalExtensions else [additionalExtensions] },
          '#withAdditionalExtensionsMixin':: d.fn(help='"Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='additionalExtensions', type=d.T.array)]),
          withAdditionalExtensionsMixin(additionalExtensions): { additionalExtensions+: if std.isArray(v=additionalExtensions) then additionalExtensions else [additionalExtensions] },
          '#withAiaOcspServers':: d.fn(help='"Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the \\"Authority Information Access\\" extension in the certificate."', args=[d.arg(name='aiaOcspServers', type=d.T.array)]),
          withAiaOcspServers(aiaOcspServers): { aiaOcspServers: if std.isArray(v=aiaOcspServers) then aiaOcspServers else [aiaOcspServers] },
          '#withAiaOcspServersMixin':: d.fn(help='"Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the \\"Authority Information Access\\" extension in the certificate."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='aiaOcspServers', type=d.T.array)]),
          withAiaOcspServersMixin(aiaOcspServers): { aiaOcspServers+: if std.isArray(v=aiaOcspServers) then aiaOcspServers else [aiaOcspServers] },
          '#withCaOptions':: d.fn(help='"Describes values that are relevant in a CA certificate. Structure is documented below."', args=[d.arg(name='caOptions', type=d.T.array)]),
          withCaOptions(caOptions): { caOptions: if std.isArray(v=caOptions) then caOptions else [caOptions] },
          '#withCaOptionsMixin':: d.fn(help='"Describes values that are relevant in a CA certificate. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='caOptions', type=d.T.array)]),
          withCaOptionsMixin(caOptions): { caOptions+: if std.isArray(v=caOptions) then caOptions else [caOptions] },
          '#withKeyUsage':: d.fn(help='"Indicates the intended use for keys that correspond to a certificate. Structure is documented below."', args=[d.arg(name='keyUsage', type=d.T.array)]),
          withKeyUsage(keyUsage): { keyUsage: if std.isArray(v=keyUsage) then keyUsage else [keyUsage] },
          '#withKeyUsageMixin':: d.fn(help='"Indicates the intended use for keys that correspond to a certificate. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='keyUsage', type=d.T.array)]),
          withKeyUsageMixin(keyUsage): { keyUsage+: if std.isArray(v=keyUsage) then keyUsage else [keyUsage] },
          '#withPolicyIds':: d.fn(help='"Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4. Structure is documented below."', args=[d.arg(name='policyIds', type=d.T.array)]),
          withPolicyIds(policyIds): { policyIds: if std.isArray(v=policyIds) then policyIds else [policyIds] },
          '#withPolicyIdsMixin':: d.fn(help='"Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='policyIds', type=d.T.array)]),
          withPolicyIdsMixin(policyIds): { policyIds+: if std.isArray(v=policyIds) then policyIds else [policyIds] },
        },
      },
      '#keySpec':: d.obj(help='"Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR. Structure is documented below."'),
      keySpec: {
        '#withAlgorithm':: d.fn(help='"The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as HSM. Possible values are SIGN_HASH_ALGORITHM_UNSPECIFIED, RSA_PSS_2048_SHA256, RSA_PSS_3072_SHA256, RSA_PSS_4096_SHA256, RSA_PKCS1_2048_SHA256, RSA_PKCS1_3072_SHA256, RSA_PKCS1_4096_SHA256, EC_P256_SHA256, and EC_P384_SHA384."', args=[d.arg(name='algorithm', type=d.T.string)]),
        withAlgorithm(algorithm): { algorithm: algorithm },
        '#withCloudKmsKeyVersion':: d.fn(help='"The resource name for an existing Cloud KMS CryptoKeyVersion in the format projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*."', args=[d.arg(name='cloudKmsKeyVersion', type=d.T.string)]),
        withCloudKmsKeyVersion(cloudKmsKeyVersion): { cloudKmsKeyVersion: cloudKmsKeyVersion },
      },
      '#poolRef':: d.obj(help='"Reference to a CAPool to populate pool."'),
      poolRef: {
        '#policy':: d.obj(help='"Policies for referencing."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { forProvider+: { poolRef+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { forProvider+: { poolRef+: { policy+: { resolve: resolve } } } } },
        },
        '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { forProvider+: { poolRef+: { name: name } } } },
      },
      '#poolSelector':: d.obj(help='"Selector for a CAPool to populate pool."'),
      poolSelector: {
        '#policy':: d.obj(help='"Policies for selection."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { forProvider+: { poolSelector+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { forProvider+: { poolSelector+: { policy+: { resolve: resolve } } } } },
        },
        '#withMatchControllerRef':: d.fn(help='"MatchControllerRef ensures an object with the same controller reference as the selecting object is selected."', args=[d.arg(name='matchControllerRef', type=d.T.boolean)]),
        withMatchControllerRef(matchControllerRef): { spec+: { forProvider+: { poolSelector+: { matchControllerRef: matchControllerRef } } } },
        '#withMatchLabels':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabels(matchLabels): { spec+: { forProvider+: { poolSelector+: { matchLabels: matchLabels } } } },
        '#withMatchLabelsMixin':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabelsMixin(matchLabels): { spec+: { forProvider+: { poolSelector+: { matchLabels+: matchLabels } } } },
      },
      '#withConfig':: d.fn(help='"The config used to create a self-signed X.509 certificate or CSR. Structure is documented below."', args=[d.arg(name='config', type=d.T.array)]),
      withConfig(config): { spec+: { forProvider+: { config: if std.isArray(v=config) then config else [config] } } },
      '#withConfigMixin':: d.fn(help='"The config used to create a self-signed X.509 certificate or CSR. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='config', type=d.T.array)]),
      withConfigMixin(config): { spec+: { forProvider+: { config+: if std.isArray(v=config) then config else [config] } } },
      '#withDeletionProtection':: d.fn(help='', args=[d.arg(name='deletionProtection', type=d.T.boolean)]),
      withDeletionProtection(deletionProtection): { spec+: { forProvider+: { deletionProtection: deletionProtection } } },
      '#withDesiredState':: d.fn(help='"Desired state of the CertificateAuthority. Set this field to STAGED to create a STAGED root CA."', args=[d.arg(name='desiredState', type=d.T.string)]),
      withDesiredState(desiredState): { spec+: { forProvider+: { desiredState: desiredState } } },
      '#withGcsBucket':: d.fn(help='"The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as gs://) or suffixes (such as .googleapis.com). For example, to use a bucket named my-bucket, you would simply specify my-bucket. If not specified, a managed bucket will be created."', args=[d.arg(name='gcsBucket', type=d.T.string)]),
      withGcsBucket(gcsBucket): { spec+: { forProvider+: { gcsBucket: gcsBucket } } },
      '#withIgnoreActiveCertificatesOnDeletion':: d.fn(help='"This field allows the CA to be deleted even if the CA has active certs. Active certs include both unrevoked and unexpired certs. Use with care. Defaults to false."', args=[d.arg(name='ignoreActiveCertificatesOnDeletion', type=d.T.boolean)]),
      withIgnoreActiveCertificatesOnDeletion(ignoreActiveCertificatesOnDeletion): { spec+: { forProvider+: { ignoreActiveCertificatesOnDeletion: ignoreActiveCertificatesOnDeletion } } },
      '#withKeySpec':: d.fn(help='"Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR. Structure is documented below."', args=[d.arg(name='keySpec', type=d.T.array)]),
      withKeySpec(keySpec): { spec+: { forProvider+: { keySpec: if std.isArray(v=keySpec) then keySpec else [keySpec] } } },
      '#withKeySpecMixin':: d.fn(help='"Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR. Structure is documented below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='keySpec', type=d.T.array)]),
      withKeySpecMixin(keySpec): { spec+: { forProvider+: { keySpec+: if std.isArray(v=keySpec) then keySpec else [keySpec] } } },
      '#withLabels':: d.fn(help='"Labels with user-defined metadata. An object containing a list of \\"key\\": value pairs. Example: { \\"name\\": \\"wrench\\", \\"mass\\": \\"1.3kg\\", \\"count\\": \\"3\\" }."', args=[d.arg(name='labels', type=d.T.object)]),
      withLabels(labels): { spec+: { forProvider+: { labels: labels } } },
      '#withLabelsMixin':: d.fn(help='"Labels with user-defined metadata. An object containing a list of \\"key\\": value pairs. Example: { \\"name\\": \\"wrench\\", \\"mass\\": \\"1.3kg\\", \\"count\\": \\"3\\" }."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
      withLabelsMixin(labels): { spec+: { forProvider+: { labels+: labels } } },
      '#withLifetime':: d.fn(help="\"The desired lifetime of the CA certificate. Used to create the \\\"notBeforeTime\\\" and \\\"notAfterTime\\\" fields inside an X.509 certificate. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: \\\"3.5s\\\".\"", args=[d.arg(name='lifetime', type=d.T.string)]),
      withLifetime(lifetime): { spec+: { forProvider+: { lifetime: lifetime } } },
      '#withLocation':: d.fn(help='"Location of the CertificateAuthority. A full list of valid locations can be found by running gcloud privateca locations list."', args=[d.arg(name='location', type=d.T.string)]),
      withLocation(location): { spec+: { forProvider+: { location: location } } },
      '#withPool':: d.fn(help='"The name of the CaPool this Certificate Authority belongs to."', args=[d.arg(name='pool', type=d.T.string)]),
      withPool(pool): { spec+: { forProvider+: { pool: pool } } },
      '#withProject':: d.fn(help='"The ID of the project in which the resource belongs. If it is not provided, the provider project is used."', args=[d.arg(name='project', type=d.T.string)]),
      withProject(project): { spec+: { forProvider+: { project: project } } },
      '#withType':: d.fn(help='"The Type of this CertificateAuthority. ~> Note: For SUBORDINATE Certificate Authorities, they need to be manually activated (via Cloud Console of gcloud) before they can issue certificates. Default value is SELF_SIGNED. Possible values are SELF_SIGNED and SUBORDINATE."', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { spec+: { forProvider+: { type: type } } },
    },
    '#providerConfigRef':: d.obj(help='"ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured."'),
    providerConfigRef: {
      '#policy':: d.obj(help='"Policies for referencing."'),
      policy: {
        '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
        withResolution(resolution): { spec+: { providerConfigRef+: { policy+: { resolution: resolution } } } },
        '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
        withResolve(resolve): { spec+: { providerConfigRef+: { policy+: { resolve: resolve } } } },
      },
      '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { providerConfigRef+: { name: name } } },
    },
    '#providerRef':: d.obj(help='"ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`"'),
    providerRef: {
      '#policy':: d.obj(help='"Policies for referencing."'),
      policy: {
        '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
        withResolution(resolution): { spec+: { providerRef+: { policy+: { resolution: resolution } } } },
        '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
        withResolve(resolve): { spec+: { providerRef+: { policy+: { resolve: resolve } } } },
      },
      '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { providerRef+: { name: name } } },
    },
    '#publishConnectionDetailsTo':: d.obj(help='"PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource."'),
    publishConnectionDetailsTo: {
      '#configRef':: d.obj(help='"SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret."'),
      configRef: {
        '#policy':: d.obj(help='"Policies for referencing."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { publishConnectionDetailsTo+: { configRef+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { publishConnectionDetailsTo+: { configRef+: { policy+: { resolve: resolve } } } } },
        },
        '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { publishConnectionDetailsTo+: { configRef+: { name: name } } } },
      },
      '#metadata':: d.obj(help='"Metadata is the metadata for connection secret."'),
      metadata: {
        '#withAnnotations':: d.fn(help='"Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.annotations\\". - It is up to Secret Store implementation for others store types."', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { publishConnectionDetailsTo+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='"Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.annotations\\". - It is up to Secret Store implementation for others store types."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { publishConnectionDetailsTo+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='"Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.labels\\". - It is up to Secret Store implementation for others store types."', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { publishConnectionDetailsTo+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='"Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.labels\\". - It is up to Secret Store implementation for others store types."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { publishConnectionDetailsTo+: { metadata+: { labels+: labels } } } },
        '#withType':: d.fn(help='"Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores."', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { publishConnectionDetailsTo+: { metadata+: { type: type } } } },
      },
      '#withName':: d.fn(help='"Name is the name of the connection secret."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { publishConnectionDetailsTo+: { name: name } } },
    },
    '#withDeletionPolicy':: d.fn(help='"DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \\"Delete\\" or \\"Orphan\\" the external resource."', args=[d.arg(name='deletionPolicy', type=d.T.string)]),
    withDeletionPolicy(deletionPolicy): { spec+: { deletionPolicy: deletionPolicy } },
    '#writeConnectionSecretToRef':: d.obj(help='"WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other."'),
    writeConnectionSecretToRef: {
      '#withName':: d.fn(help='"Name of the secret."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { writeConnectionSecretToRef+: { name: name } } },
      '#withNamespace':: d.fn(help='"Namespace of the secret."', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { spec+: { writeConnectionSecretToRef+: { namespace: namespace } } },
    },
  },
  '#mixin': 'ignore',
  mixin: self,
}
