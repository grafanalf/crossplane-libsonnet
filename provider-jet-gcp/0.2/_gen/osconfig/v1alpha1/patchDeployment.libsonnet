{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='patchDeployment', url='', help='"PatchDeployment is the Schema for the PatchDeployments API"'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of PatchDeployment', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'osconfig.gcp.jet.crossplane.io/v1alpha1',
    kind: 'PatchDeployment',
  } + self.metadata.withName(name=name) + self.metadata.withAnnotations(annotations={
    'tanka.dev/namespaced': 'true',
  }),
  '#spec':: d.obj(help='"PatchDeploymentSpec defines the desired state of PatchDeployment"'),
  spec: {
    '#forProvider':: d.obj(help=''),
    forProvider: {
      '#instanceFilter':: d.obj(help='"VM instances to patch."'),
      instanceFilter: {
        '#groupLabels':: d.obj(help='"Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances."'),
        groupLabels: {
          '#withLabels':: d.fn(help='"Compute Engine instance labels that must be present for a VM instance to be targeted by this filter"', args=[d.arg(name='labels', type=d.T.object)]),
          withLabels(labels): { labels: labels },
          '#withLabelsMixin':: d.fn(help='"Compute Engine instance labels that must be present for a VM instance to be targeted by this filter"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
          withLabelsMixin(labels): { labels+: labels },
        },
        '#withAll':: d.fn(help='"Target all VM instances in the project. If true, no other criteria is permitted."', args=[d.arg(name='all', type=d.T.boolean)]),
        withAll(all): { all: all },
        '#withGroupLabels':: d.fn(help='"Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances."', args=[d.arg(name='groupLabels', type=d.T.array)]),
        withGroupLabels(groupLabels): { groupLabels: if std.isArray(v=groupLabels) then groupLabels else [groupLabels] },
        '#withGroupLabelsMixin':: d.fn(help='"Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='groupLabels', type=d.T.array)]),
        withGroupLabelsMixin(groupLabels): { groupLabels+: if std.isArray(v=groupLabels) then groupLabels else [groupLabels] },
        '#withInstanceNamePrefixes':: d.fn(help='"Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix=\\"prod-\\"."', args=[d.arg(name='instanceNamePrefixes', type=d.T.array)]),
        withInstanceNamePrefixes(instanceNamePrefixes): { instanceNamePrefixes: if std.isArray(v=instanceNamePrefixes) then instanceNamePrefixes else [instanceNamePrefixes] },
        '#withInstanceNamePrefixesMixin':: d.fn(help='"Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix=\\"prod-\\"."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='instanceNamePrefixes', type=d.T.array)]),
        withInstanceNamePrefixesMixin(instanceNamePrefixes): { instanceNamePrefixes+: if std.isArray(v=instanceNamePrefixes) then instanceNamePrefixes else [instanceNamePrefixes] },
        '#withInstances':: d.fn(help="\"Targets any of the VM instances specified. Instances are specified by their URI in the 'form zones/{{zone}}/instances/{{instance_name}}', 'projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}', or 'https://www.googleapis.com/compute/v1/projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}'\"", args=[d.arg(name='instances', type=d.T.array)]),
        withInstances(instances): { instances: if std.isArray(v=instances) then instances else [instances] },
        '#withInstancesMixin':: d.fn(help="\"Targets any of the VM instances specified. Instances are specified by their URI in the 'form zones/{{zone}}/instances/{{instance_name}}', 'projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}', or 'https://www.googleapis.com/compute/v1/projects/{{project_id}}/zones/{{zone}}/instances/{{instance_name}}'\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='instances', type=d.T.array)]),
        withInstancesMixin(instances): { instances+: if std.isArray(v=instances) then instances else [instances] },
        '#withZones':: d.fn(help='"Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone."', args=[d.arg(name='zones', type=d.T.array)]),
        withZones(zones): { zones: if std.isArray(v=zones) then zones else [zones] },
        '#withZonesMixin':: d.fn(help='"Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='zones', type=d.T.array)]),
        withZonesMixin(zones): { zones+: if std.isArray(v=zones) then zones else [zones] },
      },
      '#oneTimeSchedule':: d.obj(help='"Schedule a one-time execution."'),
      oneTimeSchedule: {
        '#withExecuteTime':: d.fn(help='"The desired patch job execution time. A timestamp in RFC3339 UTC \\"Zulu\\" format, accurate to nanoseconds. Example: \\"2014-10-02T15:01:23.045123456Z\\"."', args=[d.arg(name='executeTime', type=d.T.string)]),
        withExecuteTime(executeTime): { executeTime: executeTime },
      },
      '#patchConfig':: d.obj(help='"Patch configuration that is applied."'),
      patchConfig: {
        '#apt':: d.obj(help='"Apt update settings. Use this setting to override the default apt patch rules."'),
        apt: {
          '#withExcludes':: d.fn(help='"List of packages to exclude from update. These packages will be excluded."', args=[d.arg(name='excludes', type=d.T.array)]),
          withExcludes(excludes): { excludes: if std.isArray(v=excludes) then excludes else [excludes] },
          '#withExcludesMixin':: d.fn(help='"List of packages to exclude from update. These packages will be excluded."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='excludes', type=d.T.array)]),
          withExcludesMixin(excludes): { excludes+: if std.isArray(v=excludes) then excludes else [excludes] },
          '#withExclusivePackages':: d.fn(help='"An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields."', args=[d.arg(name='exclusivePackages', type=d.T.array)]),
          withExclusivePackages(exclusivePackages): { exclusivePackages: if std.isArray(v=exclusivePackages) then exclusivePackages else [exclusivePackages] },
          '#withExclusivePackagesMixin':: d.fn(help='"An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='exclusivePackages', type=d.T.array)]),
          withExclusivePackagesMixin(exclusivePackages): { exclusivePackages+: if std.isArray(v=exclusivePackages) then exclusivePackages else [exclusivePackages] },
          '#withType':: d.fn(help='"By changing the type to DIST, the patching is performed using apt-get dist-upgrade instead. Possible values: [\\"DIST\\", \\"UPGRADE\\"]"', args=[d.arg(name='type', type=d.T.string)]),
          withType(type): { type: type },
        },
        '#goo':: d.obj(help='"goo update settings. Use this setting to override the default goo patch rules."'),
        goo: {
          '#withEnabled':: d.fn(help='"goo update settings. Use this setting to override the default goo patch rules."', args=[d.arg(name='enabled', type=d.T.boolean)]),
          withEnabled(enabled): { enabled: enabled },
        },
        '#postStep':: d.obj(help='"The ExecStep to run after the patch update."'),
        postStep: {
          '#linuxExecStepConfig':: d.obj(help='"The ExecStepConfig for all Linux VMs targeted by the PatchJob."'),
          linuxExecStepConfig: {
            '#gcsObject':: d.obj(help='"A Cloud Storage object containing the executable."'),
            gcsObject: {
              '#withBucket':: d.fn(help='"Bucket of the Cloud Storage object."', args=[d.arg(name='bucket', type=d.T.string)]),
              withBucket(bucket): { bucket: bucket },
              '#withGenerationNumber':: d.fn(help='"Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change."', args=[d.arg(name='generationNumber', type=d.T.string)]),
              withGenerationNumber(generationNumber): { generationNumber: generationNumber },
              '#withObject':: d.fn(help='"Name of the Cloud Storage object."', args=[d.arg(name='object', type=d.T.string)]),
              withObject(object): { object: object },
            },
            '#withAllowedSuccessCodes':: d.fn(help='"Defaults to [0]. A list of possible return values that the execution can return to indicate a success."', args=[d.arg(name='allowedSuccessCodes', type=d.T.array)]),
            withAllowedSuccessCodes(allowedSuccessCodes): { allowedSuccessCodes: if std.isArray(v=allowedSuccessCodes) then allowedSuccessCodes else [allowedSuccessCodes] },
            '#withAllowedSuccessCodesMixin':: d.fn(help='"Defaults to [0]. A list of possible return values that the execution can return to indicate a success."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='allowedSuccessCodes', type=d.T.array)]),
            withAllowedSuccessCodesMixin(allowedSuccessCodes): { allowedSuccessCodes+: if std.isArray(v=allowedSuccessCodes) then allowedSuccessCodes else [allowedSuccessCodes] },
            '#withGcsObject':: d.fn(help='"A Cloud Storage object containing the executable."', args=[d.arg(name='gcsObject', type=d.T.array)]),
            withGcsObject(gcsObject): { gcsObject: if std.isArray(v=gcsObject) then gcsObject else [gcsObject] },
            '#withGcsObjectMixin':: d.fn(help='"A Cloud Storage object containing the executable."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='gcsObject', type=d.T.array)]),
            withGcsObjectMixin(gcsObject): { gcsObject+: if std.isArray(v=gcsObject) then gcsObject else [gcsObject] },
            '#withInterpreter':: d.fn(help='"The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with shebang lines. Possible values: [\\"SHELL\\", \\"POWERSHELL\\"]"', args=[d.arg(name='interpreter', type=d.T.string)]),
            withInterpreter(interpreter): { interpreter: interpreter },
            '#withLocalPath':: d.fn(help='"An absolute path to the executable on the VM."', args=[d.arg(name='localPath', type=d.T.string)]),
            withLocalPath(localPath): { localPath: localPath },
          },
          '#windowsExecStepConfig':: d.obj(help='"The ExecStepConfig for all Windows VMs targeted by the PatchJob."'),
          windowsExecStepConfig: {
            '#gcsObject':: d.obj(help='"A Cloud Storage object containing the executable."'),
            gcsObject: {
              '#withBucket':: d.fn(help='"Bucket of the Cloud Storage object."', args=[d.arg(name='bucket', type=d.T.string)]),
              withBucket(bucket): { bucket: bucket },
              '#withGenerationNumber':: d.fn(help='"Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change."', args=[d.arg(name='generationNumber', type=d.T.string)]),
              withGenerationNumber(generationNumber): { generationNumber: generationNumber },
              '#withObject':: d.fn(help='"Name of the Cloud Storage object."', args=[d.arg(name='object', type=d.T.string)]),
              withObject(object): { object: object },
            },
            '#withAllowedSuccessCodes':: d.fn(help='"Defaults to [0]. A list of possible return values that the execution can return to indicate a success."', args=[d.arg(name='allowedSuccessCodes', type=d.T.array)]),
            withAllowedSuccessCodes(allowedSuccessCodes): { allowedSuccessCodes: if std.isArray(v=allowedSuccessCodes) then allowedSuccessCodes else [allowedSuccessCodes] },
            '#withAllowedSuccessCodesMixin':: d.fn(help='"Defaults to [0]. A list of possible return values that the execution can return to indicate a success."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='allowedSuccessCodes', type=d.T.array)]),
            withAllowedSuccessCodesMixin(allowedSuccessCodes): { allowedSuccessCodes+: if std.isArray(v=allowedSuccessCodes) then allowedSuccessCodes else [allowedSuccessCodes] },
            '#withGcsObject':: d.fn(help='"A Cloud Storage object containing the executable."', args=[d.arg(name='gcsObject', type=d.T.array)]),
            withGcsObject(gcsObject): { gcsObject: if std.isArray(v=gcsObject) then gcsObject else [gcsObject] },
            '#withGcsObjectMixin':: d.fn(help='"A Cloud Storage object containing the executable."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='gcsObject', type=d.T.array)]),
            withGcsObjectMixin(gcsObject): { gcsObject+: if std.isArray(v=gcsObject) then gcsObject else [gcsObject] },
            '#withInterpreter':: d.fn(help='"The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with shebang lines. Possible values: [\\"SHELL\\", \\"POWERSHELL\\"]"', args=[d.arg(name='interpreter', type=d.T.string)]),
            withInterpreter(interpreter): { interpreter: interpreter },
            '#withLocalPath':: d.fn(help='"An absolute path to the executable on the VM."', args=[d.arg(name='localPath', type=d.T.string)]),
            withLocalPath(localPath): { localPath: localPath },
          },
          '#withLinuxExecStepConfig':: d.fn(help='"The ExecStepConfig for all Linux VMs targeted by the PatchJob."', args=[d.arg(name='linuxExecStepConfig', type=d.T.array)]),
          withLinuxExecStepConfig(linuxExecStepConfig): { linuxExecStepConfig: if std.isArray(v=linuxExecStepConfig) then linuxExecStepConfig else [linuxExecStepConfig] },
          '#withLinuxExecStepConfigMixin':: d.fn(help='"The ExecStepConfig for all Linux VMs targeted by the PatchJob."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='linuxExecStepConfig', type=d.T.array)]),
          withLinuxExecStepConfigMixin(linuxExecStepConfig): { linuxExecStepConfig+: if std.isArray(v=linuxExecStepConfig) then linuxExecStepConfig else [linuxExecStepConfig] },
          '#withWindowsExecStepConfig':: d.fn(help='"The ExecStepConfig for all Windows VMs targeted by the PatchJob."', args=[d.arg(name='windowsExecStepConfig', type=d.T.array)]),
          withWindowsExecStepConfig(windowsExecStepConfig): { windowsExecStepConfig: if std.isArray(v=windowsExecStepConfig) then windowsExecStepConfig else [windowsExecStepConfig] },
          '#withWindowsExecStepConfigMixin':: d.fn(help='"The ExecStepConfig for all Windows VMs targeted by the PatchJob."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='windowsExecStepConfig', type=d.T.array)]),
          withWindowsExecStepConfigMixin(windowsExecStepConfig): { windowsExecStepConfig+: if std.isArray(v=windowsExecStepConfig) then windowsExecStepConfig else [windowsExecStepConfig] },
        },
        '#preStep':: d.obj(help='"The ExecStep to run before the patch update."'),
        preStep: {
          '#linuxExecStepConfig':: d.obj(help='"The ExecStepConfig for all Linux VMs targeted by the PatchJob."'),
          linuxExecStepConfig: {
            '#gcsObject':: d.obj(help='"A Cloud Storage object containing the executable."'),
            gcsObject: {
              '#withBucket':: d.fn(help='"Bucket of the Cloud Storage object."', args=[d.arg(name='bucket', type=d.T.string)]),
              withBucket(bucket): { bucket: bucket },
              '#withGenerationNumber':: d.fn(help='"Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change."', args=[d.arg(name='generationNumber', type=d.T.string)]),
              withGenerationNumber(generationNumber): { generationNumber: generationNumber },
              '#withObject':: d.fn(help='"Name of the Cloud Storage object."', args=[d.arg(name='object', type=d.T.string)]),
              withObject(object): { object: object },
            },
            '#withAllowedSuccessCodes':: d.fn(help='"Defaults to [0]. A list of possible return values that the execution can return to indicate a success."', args=[d.arg(name='allowedSuccessCodes', type=d.T.array)]),
            withAllowedSuccessCodes(allowedSuccessCodes): { allowedSuccessCodes: if std.isArray(v=allowedSuccessCodes) then allowedSuccessCodes else [allowedSuccessCodes] },
            '#withAllowedSuccessCodesMixin':: d.fn(help='"Defaults to [0]. A list of possible return values that the execution can return to indicate a success."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='allowedSuccessCodes', type=d.T.array)]),
            withAllowedSuccessCodesMixin(allowedSuccessCodes): { allowedSuccessCodes+: if std.isArray(v=allowedSuccessCodes) then allowedSuccessCodes else [allowedSuccessCodes] },
            '#withGcsObject':: d.fn(help='"A Cloud Storage object containing the executable."', args=[d.arg(name='gcsObject', type=d.T.array)]),
            withGcsObject(gcsObject): { gcsObject: if std.isArray(v=gcsObject) then gcsObject else [gcsObject] },
            '#withGcsObjectMixin':: d.fn(help='"A Cloud Storage object containing the executable."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='gcsObject', type=d.T.array)]),
            withGcsObjectMixin(gcsObject): { gcsObject+: if std.isArray(v=gcsObject) then gcsObject else [gcsObject] },
            '#withInterpreter':: d.fn(help='"The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with shebang lines. Possible values: [\\"SHELL\\", \\"POWERSHELL\\"]"', args=[d.arg(name='interpreter', type=d.T.string)]),
            withInterpreter(interpreter): { interpreter: interpreter },
            '#withLocalPath':: d.fn(help='"An absolute path to the executable on the VM."', args=[d.arg(name='localPath', type=d.T.string)]),
            withLocalPath(localPath): { localPath: localPath },
          },
          '#windowsExecStepConfig':: d.obj(help='"The ExecStepConfig for all Windows VMs targeted by the PatchJob."'),
          windowsExecStepConfig: {
            '#gcsObject':: d.obj(help='"A Cloud Storage object containing the executable."'),
            gcsObject: {
              '#withBucket':: d.fn(help='"Bucket of the Cloud Storage object."', args=[d.arg(name='bucket', type=d.T.string)]),
              withBucket(bucket): { bucket: bucket },
              '#withGenerationNumber':: d.fn(help='"Generation number of the Cloud Storage object. This is used to ensure that the ExecStep specified by this PatchJob does not change."', args=[d.arg(name='generationNumber', type=d.T.string)]),
              withGenerationNumber(generationNumber): { generationNumber: generationNumber },
              '#withObject':: d.fn(help='"Name of the Cloud Storage object."', args=[d.arg(name='object', type=d.T.string)]),
              withObject(object): { object: object },
            },
            '#withAllowedSuccessCodes':: d.fn(help='"Defaults to [0]. A list of possible return values that the execution can return to indicate a success."', args=[d.arg(name='allowedSuccessCodes', type=d.T.array)]),
            withAllowedSuccessCodes(allowedSuccessCodes): { allowedSuccessCodes: if std.isArray(v=allowedSuccessCodes) then allowedSuccessCodes else [allowedSuccessCodes] },
            '#withAllowedSuccessCodesMixin':: d.fn(help='"Defaults to [0]. A list of possible return values that the execution can return to indicate a success."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='allowedSuccessCodes', type=d.T.array)]),
            withAllowedSuccessCodesMixin(allowedSuccessCodes): { allowedSuccessCodes+: if std.isArray(v=allowedSuccessCodes) then allowedSuccessCodes else [allowedSuccessCodes] },
            '#withGcsObject':: d.fn(help='"A Cloud Storage object containing the executable."', args=[d.arg(name='gcsObject', type=d.T.array)]),
            withGcsObject(gcsObject): { gcsObject: if std.isArray(v=gcsObject) then gcsObject else [gcsObject] },
            '#withGcsObjectMixin':: d.fn(help='"A Cloud Storage object containing the executable."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='gcsObject', type=d.T.array)]),
            withGcsObjectMixin(gcsObject): { gcsObject+: if std.isArray(v=gcsObject) then gcsObject else [gcsObject] },
            '#withInterpreter':: d.fn(help='"The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with shebang lines. Possible values: [\\"SHELL\\", \\"POWERSHELL\\"]"', args=[d.arg(name='interpreter', type=d.T.string)]),
            withInterpreter(interpreter): { interpreter: interpreter },
            '#withLocalPath':: d.fn(help='"An absolute path to the executable on the VM."', args=[d.arg(name='localPath', type=d.T.string)]),
            withLocalPath(localPath): { localPath: localPath },
          },
          '#withLinuxExecStepConfig':: d.fn(help='"The ExecStepConfig for all Linux VMs targeted by the PatchJob."', args=[d.arg(name='linuxExecStepConfig', type=d.T.array)]),
          withLinuxExecStepConfig(linuxExecStepConfig): { linuxExecStepConfig: if std.isArray(v=linuxExecStepConfig) then linuxExecStepConfig else [linuxExecStepConfig] },
          '#withLinuxExecStepConfigMixin':: d.fn(help='"The ExecStepConfig for all Linux VMs targeted by the PatchJob."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='linuxExecStepConfig', type=d.T.array)]),
          withLinuxExecStepConfigMixin(linuxExecStepConfig): { linuxExecStepConfig+: if std.isArray(v=linuxExecStepConfig) then linuxExecStepConfig else [linuxExecStepConfig] },
          '#withWindowsExecStepConfig':: d.fn(help='"The ExecStepConfig for all Windows VMs targeted by the PatchJob."', args=[d.arg(name='windowsExecStepConfig', type=d.T.array)]),
          withWindowsExecStepConfig(windowsExecStepConfig): { windowsExecStepConfig: if std.isArray(v=windowsExecStepConfig) then windowsExecStepConfig else [windowsExecStepConfig] },
          '#withWindowsExecStepConfigMixin':: d.fn(help='"The ExecStepConfig for all Windows VMs targeted by the PatchJob."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='windowsExecStepConfig', type=d.T.array)]),
          withWindowsExecStepConfigMixin(windowsExecStepConfig): { windowsExecStepConfig+: if std.isArray(v=windowsExecStepConfig) then windowsExecStepConfig else [windowsExecStepConfig] },
        },
        '#windowsUpdate':: d.obj(help='"Windows update settings. Use this setting to override the default Windows patch rules."'),
        windowsUpdate: {
          '#withClassifications':: d.fn(help='"Only apply updates of these windows update classifications. If empty, all updates are applied. Possible values: [\\"CRITICAL\\", \\"SECURITY\\", \\"DEFINITION\\", \\"DRIVER\\", \\"FEATURE_PACK\\", \\"SERVICE_PACK\\", \\"TOOL\\", \\"UPDATE_ROLLUP\\", \\"UPDATE\\"]"', args=[d.arg(name='classifications', type=d.T.array)]),
          withClassifications(classifications): { classifications: if std.isArray(v=classifications) then classifications else [classifications] },
          '#withClassificationsMixin':: d.fn(help='"Only apply updates of these windows update classifications. If empty, all updates are applied. Possible values: [\\"CRITICAL\\", \\"SECURITY\\", \\"DEFINITION\\", \\"DRIVER\\", \\"FEATURE_PACK\\", \\"SERVICE_PACK\\", \\"TOOL\\", \\"UPDATE_ROLLUP\\", \\"UPDATE\\"]"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='classifications', type=d.T.array)]),
          withClassificationsMixin(classifications): { classifications+: if std.isArray(v=classifications) then classifications else [classifications] },
          '#withExcludes':: d.fn(help='"List of KBs to exclude from update."', args=[d.arg(name='excludes', type=d.T.array)]),
          withExcludes(excludes): { excludes: if std.isArray(v=excludes) then excludes else [excludes] },
          '#withExcludesMixin':: d.fn(help='"List of KBs to exclude from update."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='excludes', type=d.T.array)]),
          withExcludesMixin(excludes): { excludes+: if std.isArray(v=excludes) then excludes else [excludes] },
          '#withExclusivePatches':: d.fn(help='"An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations."', args=[d.arg(name='exclusivePatches', type=d.T.array)]),
          withExclusivePatches(exclusivePatches): { exclusivePatches: if std.isArray(v=exclusivePatches) then exclusivePatches else [exclusivePatches] },
          '#withExclusivePatchesMixin':: d.fn(help='"An exclusive list of kbs to be updated. These are the only patches that will be updated. This field must not be used with other patch configurations."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='exclusivePatches', type=d.T.array)]),
          withExclusivePatchesMixin(exclusivePatches): { exclusivePatches+: if std.isArray(v=exclusivePatches) then exclusivePatches else [exclusivePatches] },
        },
        '#withApt':: d.fn(help='"Apt update settings. Use this setting to override the default apt patch rules."', args=[d.arg(name='apt', type=d.T.array)]),
        withApt(apt): { apt: if std.isArray(v=apt) then apt else [apt] },
        '#withAptMixin':: d.fn(help='"Apt update settings. Use this setting to override the default apt patch rules."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='apt', type=d.T.array)]),
        withAptMixin(apt): { apt+: if std.isArray(v=apt) then apt else [apt] },
        '#withGoo':: d.fn(help='"goo update settings. Use this setting to override the default goo patch rules."', args=[d.arg(name='goo', type=d.T.array)]),
        withGoo(goo): { goo: if std.isArray(v=goo) then goo else [goo] },
        '#withGooMixin':: d.fn(help='"goo update settings. Use this setting to override the default goo patch rules."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='goo', type=d.T.array)]),
        withGooMixin(goo): { goo+: if std.isArray(v=goo) then goo else [goo] },
        '#withPostStep':: d.fn(help='"The ExecStep to run after the patch update."', args=[d.arg(name='postStep', type=d.T.array)]),
        withPostStep(postStep): { postStep: if std.isArray(v=postStep) then postStep else [postStep] },
        '#withPostStepMixin':: d.fn(help='"The ExecStep to run after the patch update."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='postStep', type=d.T.array)]),
        withPostStepMixin(postStep): { postStep+: if std.isArray(v=postStep) then postStep else [postStep] },
        '#withPreStep':: d.fn(help='"The ExecStep to run before the patch update."', args=[d.arg(name='preStep', type=d.T.array)]),
        withPreStep(preStep): { preStep: if std.isArray(v=preStep) then preStep else [preStep] },
        '#withPreStepMixin':: d.fn(help='"The ExecStep to run before the patch update."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preStep', type=d.T.array)]),
        withPreStepMixin(preStep): { preStep+: if std.isArray(v=preStep) then preStep else [preStep] },
        '#withRebootConfig':: d.fn(help='"Post-patch reboot settings. Possible values: [\\"DEFAULT\\", \\"ALWAYS\\", \\"NEVER\\"]"', args=[d.arg(name='rebootConfig', type=d.T.string)]),
        withRebootConfig(rebootConfig): { rebootConfig: rebootConfig },
        '#withWindowsUpdate':: d.fn(help='"Windows update settings. Use this setting to override the default Windows patch rules."', args=[d.arg(name='windowsUpdate', type=d.T.array)]),
        withWindowsUpdate(windowsUpdate): { windowsUpdate: if std.isArray(v=windowsUpdate) then windowsUpdate else [windowsUpdate] },
        '#withWindowsUpdateMixin':: d.fn(help='"Windows update settings. Use this setting to override the default Windows patch rules."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='windowsUpdate', type=d.T.array)]),
        withWindowsUpdateMixin(windowsUpdate): { windowsUpdate+: if std.isArray(v=windowsUpdate) then windowsUpdate else [windowsUpdate] },
        '#withYum':: d.fn(help='"Yum update settings. Use this setting to override the default yum patch rules."', args=[d.arg(name='yum', type=d.T.array)]),
        withYum(yum): { yum: if std.isArray(v=yum) then yum else [yum] },
        '#withYumMixin':: d.fn(help='"Yum update settings. Use this setting to override the default yum patch rules."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='yum', type=d.T.array)]),
        withYumMixin(yum): { yum+: if std.isArray(v=yum) then yum else [yum] },
        '#withZypper':: d.fn(help='"zypper update settings. Use this setting to override the default zypper patch rules."', args=[d.arg(name='zypper', type=d.T.array)]),
        withZypper(zypper): { zypper: if std.isArray(v=zypper) then zypper else [zypper] },
        '#withZypperMixin':: d.fn(help='"zypper update settings. Use this setting to override the default zypper patch rules."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='zypper', type=d.T.array)]),
        withZypperMixin(zypper): { zypper+: if std.isArray(v=zypper) then zypper else [zypper] },
        '#yum':: d.obj(help='"Yum update settings. Use this setting to override the default yum patch rules."'),
        yum: {
          '#withExcludes':: d.fn(help='"List of packages to exclude from update. These packages will be excluded."', args=[d.arg(name='excludes', type=d.T.array)]),
          withExcludes(excludes): { excludes: if std.isArray(v=excludes) then excludes else [excludes] },
          '#withExcludesMixin':: d.fn(help='"List of packages to exclude from update. These packages will be excluded."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='excludes', type=d.T.array)]),
          withExcludesMixin(excludes): { excludes+: if std.isArray(v=excludes) then excludes else [excludes] },
          '#withExclusivePackages':: d.fn(help='"An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields."', args=[d.arg(name='exclusivePackages', type=d.T.array)]),
          withExclusivePackages(exclusivePackages): { exclusivePackages: if std.isArray(v=exclusivePackages) then exclusivePackages else [exclusivePackages] },
          '#withExclusivePackagesMixin':: d.fn(help='"An exclusive list of packages to be updated. These are the only packages that will be updated. If these packages are not installed, they will be ignored. This field cannot be specified with any other patch configuration fields."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='exclusivePackages', type=d.T.array)]),
          withExclusivePackagesMixin(exclusivePackages): { exclusivePackages+: if std.isArray(v=exclusivePackages) then exclusivePackages else [exclusivePackages] },
          '#withMinimal':: d.fn(help='"Will cause patch to run yum update-minimal instead."', args=[d.arg(name='minimal', type=d.T.boolean)]),
          withMinimal(minimal): { minimal: minimal },
          '#withSecurity':: d.fn(help='"Adds the --security flag to yum update. Not supported on all platforms."', args=[d.arg(name='security', type=d.T.boolean)]),
          withSecurity(security): { security: security },
        },
        '#zypper':: d.obj(help='"zypper update settings. Use this setting to override the default zypper patch rules."'),
        zypper: {
          '#withCategories':: d.fn(help='"Install only patches with these categories. Common categories include security, recommended, and feature."', args=[d.arg(name='categories', type=d.T.array)]),
          withCategories(categories): { categories: if std.isArray(v=categories) then categories else [categories] },
          '#withCategoriesMixin':: d.fn(help='"Install only patches with these categories. Common categories include security, recommended, and feature."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='categories', type=d.T.array)]),
          withCategoriesMixin(categories): { categories+: if std.isArray(v=categories) then categories else [categories] },
          '#withExcludes':: d.fn(help='"List of packages to exclude from update."', args=[d.arg(name='excludes', type=d.T.array)]),
          withExcludes(excludes): { excludes: if std.isArray(v=excludes) then excludes else [excludes] },
          '#withExcludesMixin':: d.fn(help='"List of packages to exclude from update."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='excludes', type=d.T.array)]),
          withExcludesMixin(excludes): { excludes+: if std.isArray(v=excludes) then excludes else [excludes] },
          '#withExclusivePatches':: d.fn(help="\"An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.\"", args=[d.arg(name='exclusivePatches', type=d.T.array)]),
          withExclusivePatches(exclusivePatches): { exclusivePatches: if std.isArray(v=exclusivePatches) then exclusivePatches else [exclusivePatches] },
          '#withExclusivePatchesMixin':: d.fn(help="\"An exclusive list of patches to be updated. These are the only patches that will be installed using 'zypper patch patch:' command. This field must not be used with any other patch configuration fields.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='exclusivePatches', type=d.T.array)]),
          withExclusivePatchesMixin(exclusivePatches): { exclusivePatches+: if std.isArray(v=exclusivePatches) then exclusivePatches else [exclusivePatches] },
          '#withSeverities':: d.fn(help='"Install only patches with these severities. Common severities include critical, important, moderate, and low."', args=[d.arg(name='severities', type=d.T.array)]),
          withSeverities(severities): { severities: if std.isArray(v=severities) then severities else [severities] },
          '#withSeveritiesMixin':: d.fn(help='"Install only patches with these severities. Common severities include critical, important, moderate, and low."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='severities', type=d.T.array)]),
          withSeveritiesMixin(severities): { severities+: if std.isArray(v=severities) then severities else [severities] },
          '#withWithOptional':: d.fn(help='"Adds the --with-optional flag to zypper patch."', args=[d.arg(name='withOptional', type=d.T.boolean)]),
          withWithOptional(withOptional): { withOptional: withOptional },
          '#withWithUpdate':: d.fn(help='"Adds the --with-update flag, to zypper patch."', args=[d.arg(name='withUpdate', type=d.T.boolean)]),
          withWithUpdate(withUpdate): { withUpdate: withUpdate },
        },
      },
      '#recurringSchedule':: d.obj(help='"Schedule recurring executions."'),
      recurringSchedule: {
        '#monthly':: d.obj(help='"Schedule with monthly executions."'),
        monthly: {
          '#weekDayOfMonth':: d.obj(help='"Week day in a month."'),
          weekDayOfMonth: {
            '#withDayOfWeek':: d.fn(help='"A day of the week. Possible values: [\\"MONDAY\\", \\"TUESDAY\\", \\"WEDNESDAY\\", \\"THURSDAY\\", \\"FRIDAY\\", \\"SATURDAY\\", \\"SUNDAY\\"]"', args=[d.arg(name='dayOfWeek', type=d.T.string)]),
            withDayOfWeek(dayOfWeek): { dayOfWeek: dayOfWeek },
            '#withWeekOrdinal':: d.fn(help='"Week number in a month. 1-4 indicates the 1st to 4th week of the month. -1 indicates the last week of the month."', args=[d.arg(name='weekOrdinal', type=d.T.integer)]),
            withWeekOrdinal(weekOrdinal): { weekOrdinal: weekOrdinal },
          },
          '#withMonthDay':: d.fn(help='"One day of the month. 1-31 indicates the 1st to the 31st day. -1 indicates the last day of the month. Months without the target day will be skipped. For example, a schedule to run \\"every month on the 31st\\" will not run in February, April, June, etc."', args=[d.arg(name='monthDay', type=d.T.integer)]),
          withMonthDay(monthDay): { monthDay: monthDay },
          '#withWeekDayOfMonth':: d.fn(help='"Week day in a month."', args=[d.arg(name='weekDayOfMonth', type=d.T.array)]),
          withWeekDayOfMonth(weekDayOfMonth): { weekDayOfMonth: if std.isArray(v=weekDayOfMonth) then weekDayOfMonth else [weekDayOfMonth] },
          '#withWeekDayOfMonthMixin':: d.fn(help='"Week day in a month."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='weekDayOfMonth', type=d.T.array)]),
          withWeekDayOfMonthMixin(weekDayOfMonth): { weekDayOfMonth+: if std.isArray(v=weekDayOfMonth) then weekDayOfMonth else [weekDayOfMonth] },
        },
        '#timeOfDay':: d.obj(help='"Time of the day to run a recurring deployment."'),
        timeOfDay: {
          '#withHours':: d.fn(help='"Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \\"24:00:00\\" for scenarios like business closing time."', args=[d.arg(name='hours', type=d.T.integer)]),
          withHours(hours): { hours: hours },
          '#withMinutes':: d.fn(help='"Minutes of hour of day. Must be from 0 to 59."', args=[d.arg(name='minutes', type=d.T.integer)]),
          withMinutes(minutes): { minutes: minutes },
          '#withNanos':: d.fn(help='"Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999."', args=[d.arg(name='nanos', type=d.T.integer)]),
          withNanos(nanos): { nanos: nanos },
          '#withSeconds':: d.fn(help='"Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds."', args=[d.arg(name='seconds', type=d.T.integer)]),
          withSeconds(seconds): { seconds: seconds },
        },
        '#timeZone':: d.obj(help='"Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are determined by the chosen time zone."'),
        timeZone: {
          '#withId':: d.fn(help='"IANA Time Zone Database time zone, e.g. \\"America/New_York\\"."', args=[d.arg(name='id', type=d.T.string)]),
          withId(id): { id: id },
          '#withVersion':: d.fn(help='"IANA Time Zone Database version number, e.g. \\"2019a\\"."', args=[d.arg(name='version', type=d.T.string)]),
          withVersion(version): { version: version },
        },
        '#weekly':: d.obj(help='"Schedule with weekly executions."'),
        weekly: {
          '#withDayOfWeek':: d.fn(help='"IANA Time Zone Database time zone, e.g. \\"America/New_York\\". Possible values: [\\"MONDAY\\", \\"TUESDAY\\", \\"WEDNESDAY\\", \\"THURSDAY\\", \\"FRIDAY\\", \\"SATURDAY\\", \\"SUNDAY\\"]"', args=[d.arg(name='dayOfWeek', type=d.T.string)]),
          withDayOfWeek(dayOfWeek): { dayOfWeek: dayOfWeek },
        },
        '#withEndTime':: d.fn(help='"The end time at which a recurring patch deployment schedule is no longer active. A timestamp in RFC3339 UTC \\"Zulu\\" format, accurate to nanoseconds. Example: \\"2014-10-02T15:01:23.045123456Z\\"."', args=[d.arg(name='endTime', type=d.T.string)]),
        withEndTime(endTime): { endTime: endTime },
        '#withMonthly':: d.fn(help='"Schedule with monthly executions."', args=[d.arg(name='monthly', type=d.T.array)]),
        withMonthly(monthly): { monthly: if std.isArray(v=monthly) then monthly else [monthly] },
        '#withMonthlyMixin':: d.fn(help='"Schedule with monthly executions."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='monthly', type=d.T.array)]),
        withMonthlyMixin(monthly): { monthly+: if std.isArray(v=monthly) then monthly else [monthly] },
        '#withStartTime':: d.fn(help='"The time that the recurring schedule becomes effective. Defaults to createTime of the patch deployment. A timestamp in RFC3339 UTC \\"Zulu\\" format, accurate to nanoseconds. Example: \\"2014-10-02T15:01:23.045123456Z\\"."', args=[d.arg(name='startTime', type=d.T.string)]),
        withStartTime(startTime): { startTime: startTime },
        '#withTimeOfDay':: d.fn(help='"Time of the day to run a recurring deployment."', args=[d.arg(name='timeOfDay', type=d.T.array)]),
        withTimeOfDay(timeOfDay): { timeOfDay: if std.isArray(v=timeOfDay) then timeOfDay else [timeOfDay] },
        '#withTimeOfDayMixin':: d.fn(help='"Time of the day to run a recurring deployment."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='timeOfDay', type=d.T.array)]),
        withTimeOfDayMixin(timeOfDay): { timeOfDay+: if std.isArray(v=timeOfDay) then timeOfDay else [timeOfDay] },
        '#withTimeZone':: d.fn(help='"Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are determined by the chosen time zone."', args=[d.arg(name='timeZone', type=d.T.array)]),
        withTimeZone(timeZone): { timeZone: if std.isArray(v=timeZone) then timeZone else [timeZone] },
        '#withTimeZoneMixin':: d.fn(help='"Defines the time zone that timeOfDay is relative to. The rules for daylight saving time are determined by the chosen time zone."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='timeZone', type=d.T.array)]),
        withTimeZoneMixin(timeZone): { timeZone+: if std.isArray(v=timeZone) then timeZone else [timeZone] },
        '#withWeekly':: d.fn(help='"Schedule with weekly executions."', args=[d.arg(name='weekly', type=d.T.array)]),
        withWeekly(weekly): { weekly: if std.isArray(v=weekly) then weekly else [weekly] },
        '#withWeeklyMixin':: d.fn(help='"Schedule with weekly executions."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='weekly', type=d.T.array)]),
        withWeeklyMixin(weekly): { weekly+: if std.isArray(v=weekly) then weekly else [weekly] },
      },
      '#rollout':: d.obj(help='"Rollout strategy of the patch job."'),
      rollout: {
        '#disruptionBudget':: d.obj(help='"The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of 10, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops."'),
        disruptionBudget: {
          '#withFixed':: d.fn(help='"Specifies a fixed value."', args=[d.arg(name='fixed', type=d.T.integer)]),
          withFixed(fixed): { fixed: fixed },
          '#withPercentage':: d.fn(help='"Specifies the relative value defined as a percentage, which will be multiplied by a reference value."', args=[d.arg(name='percentage', type=d.T.integer)]),
          withPercentage(percentage): { percentage: percentage },
        },
        '#withDisruptionBudget':: d.fn(help='"The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of 10, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops."', args=[d.arg(name='disruptionBudget', type=d.T.array)]),
        withDisruptionBudget(disruptionBudget): { disruptionBudget: if std.isArray(v=disruptionBudget) then disruptionBudget else [disruptionBudget] },
        '#withDisruptionBudgetMixin':: d.fn(help='"The maximum number (or percentage) of VMs per zone to disrupt at any given moment. The number of VMs calculated from multiplying the percentage by the total number of VMs in a zone is rounded up. During patching, a VM is considered disrupted from the time the agent is notified to begin until patching has completed. This disruption time includes the time to complete reboot and any post-patch steps. A VM contributes to the disruption budget if its patching operation fails either when applying the patches, running pre or post patch steps, or if it fails to respond with a success notification before timing out. VMs that are not running or do not have an active agent do not count toward this disruption budget. For zone-by-zone rollouts, if the disruption budget in a zone is exceeded, the patch job stops, because continuing to the next zone requires completion of the patch process in the previous zone. For example, if the disruption budget has a fixed value of 10, and 8 VMs fail to patch in the current zone, the patch job continues to patch 2 VMs at a time until the zone is completed. When that zone is completed successfully, patching begins with 10 VMs at a time in the next zone. If 10 VMs in the next zone fail to patch, the patch job stops."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='disruptionBudget', type=d.T.array)]),
        withDisruptionBudgetMixin(disruptionBudget): { disruptionBudget+: if std.isArray(v=disruptionBudget) then disruptionBudget else [disruptionBudget] },
        '#withMode':: d.fn(help='"Mode of the patch rollout. Possible values: [\\"ZONE_BY_ZONE\\", \\"CONCURRENT_ZONES\\"]"', args=[d.arg(name='mode', type=d.T.string)]),
        withMode(mode): { mode: mode },
      },
      '#withDescription':: d.fn(help='"Description of the patch deployment. Length of the description is limited to 1024 characters."', args=[d.arg(name='description', type=d.T.string)]),
      withDescription(description): { spec+: { forProvider+: { description: description } } },
      '#withDuration':: d.fn(help="\"Duration of the patch. After the duration ends, the patch times out. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: \\\"3.5s\\", args=[d.arg(name='duration', type=d.T.string)]),
      withDuration(duration): { spec+: { forProvider+: { duration: duration } } },
      '#withInstanceFilter':: d.fn(help='"VM instances to patch."', args=[d.arg(name='instanceFilter', type=d.T.array)]),
      withInstanceFilter(instanceFilter): { spec+: { forProvider+: { instanceFilter: if std.isArray(v=instanceFilter) then instanceFilter else [instanceFilter] } } },
      '#withInstanceFilterMixin':: d.fn(help='"VM instances to patch."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='instanceFilter', type=d.T.array)]),
      withInstanceFilterMixin(instanceFilter): { spec+: { forProvider+: { instanceFilter+: if std.isArray(v=instanceFilter) then instanceFilter else [instanceFilter] } } },
      '#withOneTimeSchedule':: d.fn(help='"Schedule a one-time execution."', args=[d.arg(name='oneTimeSchedule', type=d.T.array)]),
      withOneTimeSchedule(oneTimeSchedule): { spec+: { forProvider+: { oneTimeSchedule: if std.isArray(v=oneTimeSchedule) then oneTimeSchedule else [oneTimeSchedule] } } },
      '#withOneTimeScheduleMixin':: d.fn(help='"Schedule a one-time execution."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='oneTimeSchedule', type=d.T.array)]),
      withOneTimeScheduleMixin(oneTimeSchedule): { spec+: { forProvider+: { oneTimeSchedule+: if std.isArray(v=oneTimeSchedule) then oneTimeSchedule else [oneTimeSchedule] } } },
      '#withPatchConfig':: d.fn(help='"Patch configuration that is applied."', args=[d.arg(name='patchConfig', type=d.T.array)]),
      withPatchConfig(patchConfig): { spec+: { forProvider+: { patchConfig: if std.isArray(v=patchConfig) then patchConfig else [patchConfig] } } },
      '#withPatchConfigMixin':: d.fn(help='"Patch configuration that is applied."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='patchConfig', type=d.T.array)]),
      withPatchConfigMixin(patchConfig): { spec+: { forProvider+: { patchConfig+: if std.isArray(v=patchConfig) then patchConfig else [patchConfig] } } },
      '#withPatchDeploymentId':: d.fn(help='"A name for the patch deployment in the project. When creating a name the following rules apply: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the project."', args=[d.arg(name='patchDeploymentId', type=d.T.string)]),
      withPatchDeploymentId(patchDeploymentId): { spec+: { forProvider+: { patchDeploymentId: patchDeploymentId } } },
      '#withProject':: d.fn(help='', args=[d.arg(name='project', type=d.T.string)]),
      withProject(project): { spec+: { forProvider+: { project: project } } },
      '#withRecurringSchedule':: d.fn(help='"Schedule recurring executions."', args=[d.arg(name='recurringSchedule', type=d.T.array)]),
      withRecurringSchedule(recurringSchedule): { spec+: { forProvider+: { recurringSchedule: if std.isArray(v=recurringSchedule) then recurringSchedule else [recurringSchedule] } } },
      '#withRecurringScheduleMixin':: d.fn(help='"Schedule recurring executions."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='recurringSchedule', type=d.T.array)]),
      withRecurringScheduleMixin(recurringSchedule): { spec+: { forProvider+: { recurringSchedule+: if std.isArray(v=recurringSchedule) then recurringSchedule else [recurringSchedule] } } },
      '#withRollout':: d.fn(help='"Rollout strategy of the patch job."', args=[d.arg(name='rollout', type=d.T.array)]),
      withRollout(rollout): { spec+: { forProvider+: { rollout: if std.isArray(v=rollout) then rollout else [rollout] } } },
      '#withRolloutMixin':: d.fn(help='"Rollout strategy of the patch job."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='rollout', type=d.T.array)]),
      withRolloutMixin(rollout): { spec+: { forProvider+: { rollout+: if std.isArray(v=rollout) then rollout else [rollout] } } },
    },
    '#providerConfigRef':: d.obj(help='"ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured."'),
    providerConfigRef: {
      '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { providerConfigRef+: { name: name } } },
    },
    '#providerRef':: d.obj(help='"ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`"'),
    providerRef: {
      '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { providerRef+: { name: name } } },
    },
    '#withDeletionPolicy':: d.fn(help='"DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \\"Delete\\" or \\"Orphan\\" the external resource."', args=[d.arg(name='deletionPolicy', type=d.T.string)]),
    withDeletionPolicy(deletionPolicy): { spec+: { deletionPolicy: deletionPolicy } },
    '#writeConnectionSecretToRef':: d.obj(help='"WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource."'),
    writeConnectionSecretToRef: {
      '#withName':: d.fn(help='"Name of the secret."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { writeConnectionSecretToRef+: { name: name } } },
      '#withNamespace':: d.fn(help='"Namespace of the secret."', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { spec+: { writeConnectionSecretToRef+: { namespace: namespace } } },
    },
  },
  '#mixin': 'ignore',
  mixin: self,
}
