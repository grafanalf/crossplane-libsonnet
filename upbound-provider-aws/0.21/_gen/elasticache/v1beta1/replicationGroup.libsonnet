{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='replicationGroup', url='', help='"ReplicationGroup is the Schema for the ReplicationGroups API. Provides an ElastiCache Replication Group resource."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of ReplicationGroup', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'elasticache.aws.upbound.io/v1beta1',
    kind: 'ReplicationGroup',
  } + self.metadata.withName(name=name) + self.metadata.withAnnotations(annotations={
    'tanka.dev/namespaced': 'false',
  }),
  '#spec':: d.obj(help='"ReplicationGroupSpec defines the desired state of ReplicationGroup"'),
  spec: {
    '#forProvider':: d.obj(help=''),
    forProvider: {
      '#authTokenSecretRef':: d.obj(help='"Password used to access a password protected server. Can be specified only if transit_encryption_enabled = true."'),
      authTokenSecretRef: {
        '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { spec+: { forProvider+: { authTokenSecretRef+: { key: key } } } },
        '#withName':: d.fn(help='"Name of the secret."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { forProvider+: { authTokenSecretRef+: { name: name } } } },
        '#withNamespace':: d.fn(help='"Namespace of the secret."', args=[d.arg(name='namespace', type=d.T.string)]),
        withNamespace(namespace): { spec+: { forProvider+: { authTokenSecretRef+: { namespace: namespace } } } },
      },
      '#clusterMode':: d.obj(help='"Create a native Redis cluster. automatic_failover_enabled must be set to true. Cluster Mode documented below. Only 1 cluster_mode block is allowed. Note that configuring this block does not enable cluster mode, i.e., data sharding, this requires using a parameter group that has the parameter cluster-enabled set to true."'),
      clusterMode: {
        '#withNumNodeGroups':: d.fn(help='"Number of node groups (shards) for this Redis replication group. Changing this number will trigger an online resizing operation before other settings modifications. Required unless global_replication_group_id is set."', args=[d.arg(name='numNodeGroups', type=d.T.number)]),
        withNumNodeGroups(numNodeGroups): { numNodeGroups: numNodeGroups },
        '#withReplicasPerNodeGroup':: d.fn(help='"Number of replica nodes in each node group. Valid values are 0 to 5. Changing this number will trigger an online resizing operation before other settings modifications."', args=[d.arg(name='replicasPerNodeGroup', type=d.T.number)]),
        withReplicasPerNodeGroup(replicasPerNodeGroup): { replicasPerNodeGroup: replicasPerNodeGroup },
      },
      '#kmsKeyIdRef':: d.obj(help='"Reference to a Key in kms to populate kmsKeyId."'),
      kmsKeyIdRef: {
        '#policy':: d.obj(help='"Policies for referencing."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { forProvider+: { kmsKeyIdRef+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { forProvider+: { kmsKeyIdRef+: { policy+: { resolve: resolve } } } } },
        },
        '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { forProvider+: { kmsKeyIdRef+: { name: name } } } },
      },
      '#kmsKeyIdSelector':: d.obj(help='"Selector for a Key in kms to populate kmsKeyId."'),
      kmsKeyIdSelector: {
        '#policy':: d.obj(help='"Policies for selection."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { forProvider+: { kmsKeyIdSelector+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { forProvider+: { kmsKeyIdSelector+: { policy+: { resolve: resolve } } } } },
        },
        '#withMatchControllerRef':: d.fn(help='"MatchControllerRef ensures an object with the same controller reference as the selecting object is selected."', args=[d.arg(name='matchControllerRef', type=d.T.boolean)]),
        withMatchControllerRef(matchControllerRef): { spec+: { forProvider+: { kmsKeyIdSelector+: { matchControllerRef: matchControllerRef } } } },
        '#withMatchLabels':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabels(matchLabels): { spec+: { forProvider+: { kmsKeyIdSelector+: { matchLabels: matchLabels } } } },
        '#withMatchLabelsMixin':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabelsMixin(matchLabels): { spec+: { forProvider+: { kmsKeyIdSelector+: { matchLabels+: matchLabels } } } },
      },
      '#logDeliveryConfiguration':: d.obj(help='"Specifies the destination and format of Redis SLOWLOG or Redis Engine Log. See the documentation on Amazon ElastiCache. See Log Delivery Configuration below for more details."'),
      logDeliveryConfiguration: {
        '#withDestination':: d.fn(help='"Name of either the CloudWatch Logs LogGroup or Kinesis Data Firehose resource."', args=[d.arg(name='destination', type=d.T.string)]),
        withDestination(destination): { destination: destination },
        '#withDestinationType':: d.fn(help='"For CloudWatch Logs use cloudwatch-logs or for Kinesis Data Firehose use kinesis-firehose."', args=[d.arg(name='destinationType', type=d.T.string)]),
        withDestinationType(destinationType): { destinationType: destinationType },
        '#withLogFormat':: d.fn(help='"Valid values are json or text"', args=[d.arg(name='logFormat', type=d.T.string)]),
        withLogFormat(logFormat): { logFormat: logFormat },
        '#withLogType':: d.fn(help='"Valid values are  slow-log or engine-log. Max 1 of each."', args=[d.arg(name='logType', type=d.T.string)]),
        withLogType(logType): { logType: logType },
      },
      '#securityGroupIdRefs':: d.obj(help='"References to SecurityGroup in ec2 to populate securityGroupIds."'),
      securityGroupIdRefs: {
        '#policy':: d.obj(help='"Policies for referencing."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { policy+: { resolution: resolution } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { policy+: { resolve: resolve } },
        },
        '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#securityGroupIdSelector':: d.obj(help='"Selector for a list of SecurityGroup in ec2 to populate securityGroupIds."'),
      securityGroupIdSelector: {
        '#policy':: d.obj(help='"Policies for selection."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { forProvider+: { securityGroupIdSelector+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { forProvider+: { securityGroupIdSelector+: { policy+: { resolve: resolve } } } } },
        },
        '#withMatchControllerRef':: d.fn(help='"MatchControllerRef ensures an object with the same controller reference as the selecting object is selected."', args=[d.arg(name='matchControllerRef', type=d.T.boolean)]),
        withMatchControllerRef(matchControllerRef): { spec+: { forProvider+: { securityGroupIdSelector+: { matchControllerRef: matchControllerRef } } } },
        '#withMatchLabels':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabels(matchLabels): { spec+: { forProvider+: { securityGroupIdSelector+: { matchLabels: matchLabels } } } },
        '#withMatchLabelsMixin':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabelsMixin(matchLabels): { spec+: { forProvider+: { securityGroupIdSelector+: { matchLabels+: matchLabels } } } },
      },
      '#subnetGroupNameRef':: d.obj(help='"Reference to a SubnetGroup to populate subnetGroupName."'),
      subnetGroupNameRef: {
        '#policy':: d.obj(help='"Policies for referencing."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { forProvider+: { subnetGroupNameRef+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { forProvider+: { subnetGroupNameRef+: { policy+: { resolve: resolve } } } } },
        },
        '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { forProvider+: { subnetGroupNameRef+: { name: name } } } },
      },
      '#subnetGroupNameSelector':: d.obj(help='"Selector for a SubnetGroup to populate subnetGroupName."'),
      subnetGroupNameSelector: {
        '#policy':: d.obj(help='"Policies for selection."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { forProvider+: { subnetGroupNameSelector+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { forProvider+: { subnetGroupNameSelector+: { policy+: { resolve: resolve } } } } },
        },
        '#withMatchControllerRef':: d.fn(help='"MatchControllerRef ensures an object with the same controller reference as the selecting object is selected."', args=[d.arg(name='matchControllerRef', type=d.T.boolean)]),
        withMatchControllerRef(matchControllerRef): { spec+: { forProvider+: { subnetGroupNameSelector+: { matchControllerRef: matchControllerRef } } } },
        '#withMatchLabels':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabels(matchLabels): { spec+: { forProvider+: { subnetGroupNameSelector+: { matchLabels: matchLabels } } } },
        '#withMatchLabelsMixin':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabelsMixin(matchLabels): { spec+: { forProvider+: { subnetGroupNameSelector+: { matchLabels+: matchLabels } } } },
      },
      '#withApplyImmediately':: d.fn(help='"Specifies whether any modifications are applied immediately, or during the next maintenance window. Default is false."', args=[d.arg(name='applyImmediately', type=d.T.boolean)]),
      withApplyImmediately(applyImmediately): { spec+: { forProvider+: { applyImmediately: applyImmediately } } },
      '#withAtRestEncryptionEnabled':: d.fn(help='"Whether to enable encryption at rest."', args=[d.arg(name='atRestEncryptionEnabled', type=d.T.boolean)]),
      withAtRestEncryptionEnabled(atRestEncryptionEnabled): { spec+: { forProvider+: { atRestEncryptionEnabled: atRestEncryptionEnabled } } },
      '#withAutoMinorVersionUpgrade':: d.fn(help='"Specifies whether minor version engine upgrades will be applied automatically to the underlying Cache Cluster instances during the maintenance window. Only supported for engine type \\"redis\\" and if the engine version is 6 or higher. Defaults to true."', args=[d.arg(name='autoMinorVersionUpgrade', type=d.T.string)]),
      withAutoMinorVersionUpgrade(autoMinorVersionUpgrade): { spec+: { forProvider+: { autoMinorVersionUpgrade: autoMinorVersionUpgrade } } },
      '#withAutomaticFailoverEnabled':: d.fn(help='"Specifies whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails. If enabled, number_cache_clusters must be greater than 1. Must be enabled for Redis (cluster mode enabled) replication groups. Defaults to false."', args=[d.arg(name='automaticFailoverEnabled', type=d.T.boolean)]),
      withAutomaticFailoverEnabled(automaticFailoverEnabled): { spec+: { forProvider+: { automaticFailoverEnabled: automaticFailoverEnabled } } },
      '#withAvailabilityZones':: d.fn(help="\"List of EC2 availability zones in which the replication group's cache clusters will be created. The order of the availability zones in the list is not considered.\"", args=[d.arg(name='availabilityZones', type=d.T.array)]),
      withAvailabilityZones(availabilityZones): { spec+: { forProvider+: { availabilityZones: if std.isArray(v=availabilityZones) then availabilityZones else [availabilityZones] } } },
      '#withAvailabilityZonesMixin':: d.fn(help="\"List of EC2 availability zones in which the replication group's cache clusters will be created. The order of the availability zones in the list is not considered.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='availabilityZones', type=d.T.array)]),
      withAvailabilityZonesMixin(availabilityZones): { spec+: { forProvider+: { availabilityZones+: if std.isArray(v=availabilityZones) then availabilityZones else [availabilityZones] } } },
      '#withClusterMode':: d.fn(help='"Create a native Redis cluster. automatic_failover_enabled must be set to true. Cluster Mode documented below. Only 1 cluster_mode block is allowed. Note that configuring this block does not enable cluster mode, i.e., data sharding, this requires using a parameter group that has the parameter cluster-enabled set to true."', args=[d.arg(name='clusterMode', type=d.T.array)]),
      withClusterMode(clusterMode): { spec+: { forProvider+: { clusterMode: if std.isArray(v=clusterMode) then clusterMode else [clusterMode] } } },
      '#withClusterModeMixin':: d.fn(help='"Create a native Redis cluster. automatic_failover_enabled must be set to true. Cluster Mode documented below. Only 1 cluster_mode block is allowed. Note that configuring this block does not enable cluster mode, i.e., data sharding, this requires using a parameter group that has the parameter cluster-enabled set to true."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='clusterMode', type=d.T.array)]),
      withClusterModeMixin(clusterMode): { spec+: { forProvider+: { clusterMode+: if std.isArray(v=clusterMode) then clusterMode else [clusterMode] } } },
      '#withDataTieringEnabled':: d.fn(help='"Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes."', args=[d.arg(name='dataTieringEnabled', type=d.T.boolean)]),
      withDataTieringEnabled(dataTieringEnabled): { spec+: { forProvider+: { dataTieringEnabled: dataTieringEnabled } } },
      '#withDescription':: d.fn(help='"created description for the replication group. Must not be empty."', args=[d.arg(name='description', type=d.T.string)]),
      withDescription(description): { spec+: { forProvider+: { description: description } } },
      '#withEngine':: d.fn(help='"Name of the cache engine to be used for the clusters in this replication group. The only valid value is redis."', args=[d.arg(name='engine', type=d.T.string)]),
      withEngine(engine): { spec+: { forProvider+: { engine: engine } } },
      '#withEngineVersion':: d.fn(help='"Version number of the cache engine to be used for the cache clusters in this replication group. If the version is 6 or higher, the major and minor version can be set, e.g., 6.2, or the minor version can be unspecified which will use the latest version at creation time, e.g., 6.x. Otherwise, specify the full version desired, e.g., 5.0.6. The actual engine version used is returned in the attribute engine_version_actual, see Attributes Reference below."', args=[d.arg(name='engineVersion', type=d.T.string)]),
      withEngineVersion(engineVersion): { spec+: { forProvider+: { engineVersion: engineVersion } } },
      '#withFinalSnapshotIdentifier':: d.fn(help='"The name of your final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster. If omitted, no final snapshot will be made."', args=[d.arg(name='finalSnapshotIdentifier', type=d.T.string)]),
      withFinalSnapshotIdentifier(finalSnapshotIdentifier): { spec+: { forProvider+: { finalSnapshotIdentifier: finalSnapshotIdentifier } } },
      '#withGlobalReplicationGroupId':: d.fn(help='"The ID of the global replication group to which this replication group should belong. If this parameter is specified, the replication group is added to the specified global replication group as a secondary replication group; otherwise, the replication group is not part of any global replication group. If global_replication_group_id is set, the num_node_groups parameter (or the num_node_groups parameter of the deprecated cluster_mode block) cannot be set."', args=[d.arg(name='globalReplicationGroupId', type=d.T.string)]),
      withGlobalReplicationGroupId(globalReplicationGroupId): { spec+: { forProvider+: { globalReplicationGroupId: globalReplicationGroupId } } },
      '#withKmsKeyId':: d.fn(help='"The ARN of the key that you wish to use if encrypting at rest. If not supplied, uses service managed encryption. Can be specified only if at_rest_encryption_enabled = true."', args=[d.arg(name='kmsKeyId', type=d.T.string)]),
      withKmsKeyId(kmsKeyId): { spec+: { forProvider+: { kmsKeyId: kmsKeyId } } },
      '#withLogDeliveryConfiguration':: d.fn(help='"Specifies the destination and format of Redis SLOWLOG or Redis Engine Log. See the documentation on Amazon ElastiCache. See Log Delivery Configuration below for more details."', args=[d.arg(name='logDeliveryConfiguration', type=d.T.array)]),
      withLogDeliveryConfiguration(logDeliveryConfiguration): { spec+: { forProvider+: { logDeliveryConfiguration: if std.isArray(v=logDeliveryConfiguration) then logDeliveryConfiguration else [logDeliveryConfiguration] } } },
      '#withLogDeliveryConfigurationMixin':: d.fn(help='"Specifies the destination and format of Redis SLOWLOG or Redis Engine Log. See the documentation on Amazon ElastiCache. See Log Delivery Configuration below for more details."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='logDeliveryConfiguration', type=d.T.array)]),
      withLogDeliveryConfigurationMixin(logDeliveryConfiguration): { spec+: { forProvider+: { logDeliveryConfiguration+: if std.isArray(v=logDeliveryConfiguration) then logDeliveryConfiguration else [logDeliveryConfiguration] } } },
      '#withMaintenanceWindow':: d.fn(help='"ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: sun:05:00-sun:09:00"', args=[d.arg(name='maintenanceWindow', type=d.T.string)]),
      withMaintenanceWindow(maintenanceWindow): { spec+: { forProvider+: { maintenanceWindow: maintenanceWindow } } },
      '#withMultiAzEnabled':: d.fn(help='"Specifies whether to enable Multi-AZ Support for the replication group. If true, automatic_failover_enabled must also be enabled. Defaults to false."', args=[d.arg(name='multiAzEnabled', type=d.T.boolean)]),
      withMultiAzEnabled(multiAzEnabled): { spec+: { forProvider+: { multiAzEnabled: multiAzEnabled } } },
      '#withNodeType':: d.fn(help='"Instance class to be used. See AWS documentation for information on supported node types and guidance on selecting node types. Required unless global_replication_group_id is set. Cannot be set if global_replication_group_id is set."', args=[d.arg(name='nodeType', type=d.T.string)]),
      withNodeType(nodeType): { spec+: { forProvider+: { nodeType: nodeType } } },
      '#withNotificationTopicArn':: d.fn(help='"east-1:012345678999:my_sns_topic"', args=[d.arg(name='notificationTopicArn', type=d.T.string)]),
      withNotificationTopicArn(notificationTopicArn): { spec+: { forProvider+: { notificationTopicArn: notificationTopicArn } } },
      '#withNumCacheClusters':: d.fn(help='"Number of cache clusters (primary and replicas) this replication group will have. If Multi-AZ is enabled, the value of this parameter must be at least 2. Updates will occur before other modifications. Conflicts with num_node_groups, the deprecatednumber_cache_clusters, or the deprecated cluster_mode. Defaults to 1."', args=[d.arg(name='numCacheClusters', type=d.T.number)]),
      withNumCacheClusters(numCacheClusters): { spec+: { forProvider+: { numCacheClusters: numCacheClusters } } },
      '#withNumNodeGroups':: d.fn(help='"Number of node groups (shards) for this Redis replication group. Changing this number will trigger an online resizing operation before other settings modifications. Required unless global_replication_group_id is set."', args=[d.arg(name='numNodeGroups', type=d.T.number)]),
      withNumNodeGroups(numNodeGroups): { spec+: { forProvider+: { numNodeGroups: numNodeGroups } } },
      '#withNumberCacheClusters':: d.fn(help='"00#."', args=[d.arg(name='numberCacheClusters', type=d.T.number)]),
      withNumberCacheClusters(numberCacheClusters): { spec+: { forProvider+: { numberCacheClusters: numberCacheClusters } } },
      '#withParameterGroupName':: d.fn(help='"Name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. To enable \\"cluster mode\\", i.e., data sharding, use a parameter group that has the parameter cluster-enabled set to true."', args=[d.arg(name='parameterGroupName', type=d.T.string)]),
      withParameterGroupName(parameterGroupName): { spec+: { forProvider+: { parameterGroupName: parameterGroupName } } },
      '#withPort':: d.fn(help='"–  Port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379."', args=[d.arg(name='port', type=d.T.number)]),
      withPort(port): { spec+: { forProvider+: { port: port } } },
      '#withPreferredCacheClusterAzs':: d.fn(help="\"List of EC2 availability zones in which the replication group's cache clusters will be created. The order of the availability zones in the list is considered. The first item in the list will be the primary node. Ignored when updating.\"", args=[d.arg(name='preferredCacheClusterAzs', type=d.T.array)]),
      withPreferredCacheClusterAzs(preferredCacheClusterAzs): { spec+: { forProvider+: { preferredCacheClusterAzs: if std.isArray(v=preferredCacheClusterAzs) then preferredCacheClusterAzs else [preferredCacheClusterAzs] } } },
      '#withPreferredCacheClusterAzsMixin':: d.fn(help="\"List of EC2 availability zones in which the replication group's cache clusters will be created. The order of the availability zones in the list is considered. The first item in the list will be the primary node. Ignored when updating.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='preferredCacheClusterAzs', type=d.T.array)]),
      withPreferredCacheClusterAzsMixin(preferredCacheClusterAzs): { spec+: { forProvider+: { preferredCacheClusterAzs+: if std.isArray(v=preferredCacheClusterAzs) then preferredCacheClusterAzs else [preferredCacheClusterAzs] } } },
      '#withRegion':: d.fn(help="\"Region is the region you'd like your resource to be created in.\"", args=[d.arg(name='region', type=d.T.string)]),
      withRegion(region): { spec+: { forProvider+: { region: region } } },
      '#withReplicasPerNodeGroup':: d.fn(help='"Number of replica nodes in each node group. Valid values are 0 to 5. Changing this number will trigger an online resizing operation before other settings modifications."', args=[d.arg(name='replicasPerNodeGroup', type=d.T.number)]),
      withReplicasPerNodeGroup(replicasPerNodeGroup): { spec+: { forProvider+: { replicasPerNodeGroup: replicasPerNodeGroup } } },
      '#withReplicationGroupDescription':: d.fn(help='"created description for the replication group. Must not be empty."', args=[d.arg(name='replicationGroupDescription', type=d.T.string)]),
      withReplicationGroupDescription(replicationGroupDescription): { spec+: { forProvider+: { replicationGroupDescription: replicationGroupDescription } } },
      '#withSecurityGroupIdRefs':: d.fn(help='"References to SecurityGroup in ec2 to populate securityGroupIds."', args=[d.arg(name='securityGroupIdRefs', type=d.T.array)]),
      withSecurityGroupIdRefs(securityGroupIdRefs): { spec+: { forProvider+: { securityGroupIdRefs: if std.isArray(v=securityGroupIdRefs) then securityGroupIdRefs else [securityGroupIdRefs] } } },
      '#withSecurityGroupIdRefsMixin':: d.fn(help='"References to SecurityGroup in ec2 to populate securityGroupIds."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='securityGroupIdRefs', type=d.T.array)]),
      withSecurityGroupIdRefsMixin(securityGroupIdRefs): { spec+: { forProvider+: { securityGroupIdRefs+: if std.isArray(v=securityGroupIdRefs) then securityGroupIdRefs else [securityGroupIdRefs] } } },
      '#withSecurityGroupIds':: d.fn(help='"One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud"', args=[d.arg(name='securityGroupIds', type=d.T.array)]),
      withSecurityGroupIds(securityGroupIds): { spec+: { forProvider+: { securityGroupIds: if std.isArray(v=securityGroupIds) then securityGroupIds else [securityGroupIds] } } },
      '#withSecurityGroupIdsMixin':: d.fn(help='"One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='securityGroupIds', type=d.T.array)]),
      withSecurityGroupIdsMixin(securityGroupIds): { spec+: { forProvider+: { securityGroupIds+: if std.isArray(v=securityGroupIds) then securityGroupIds else [securityGroupIds] } } },
      '#withSecurityGroupNames':: d.fn(help='"List of cache security group names to associate with this replication group."', args=[d.arg(name='securityGroupNames', type=d.T.array)]),
      withSecurityGroupNames(securityGroupNames): { spec+: { forProvider+: { securityGroupNames: if std.isArray(v=securityGroupNames) then securityGroupNames else [securityGroupNames] } } },
      '#withSecurityGroupNamesMixin':: d.fn(help='"List of cache security group names to associate with this replication group."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='securityGroupNames', type=d.T.array)]),
      withSecurityGroupNamesMixin(securityGroupNames): { spec+: { forProvider+: { securityGroupNames+: if std.isArray(v=securityGroupNames) then securityGroupNames else [securityGroupNames] } } },
      '#withSnapshotArns':: d.fn(help='"–  List of ARNs that identify Redis RDB snapshot files stored in Amazon S3. The names object names cannot contain any commas."', args=[d.arg(name='snapshotArns', type=d.T.array)]),
      withSnapshotArns(snapshotArns): { spec+: { forProvider+: { snapshotArns: if std.isArray(v=snapshotArns) then snapshotArns else [snapshotArns] } } },
      '#withSnapshotArnsMixin':: d.fn(help='"–  List of ARNs that identify Redis RDB snapshot files stored in Amazon S3. The names object names cannot contain any commas."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='snapshotArns', type=d.T.array)]),
      withSnapshotArnsMixin(snapshotArns): { spec+: { forProvider+: { snapshotArns+: if std.isArray(v=snapshotArns) then snapshotArns else [snapshotArns] } } },
      '#withSnapshotName':: d.fn(help='"Name of a snapshot from which to restore data into the new node group. Changing the snapshot_name forces a new resource."', args=[d.arg(name='snapshotName', type=d.T.string)]),
      withSnapshotName(snapshotName): { spec+: { forProvider+: { snapshotName: snapshotName } } },
      '#withSnapshotRetentionLimit':: d.fn(help='"Number of days for which ElastiCache will retain automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days before being deleted. If the value of snapshot_retention_limit is set to zero (0), backups are turned off. Please note that setting a snapshot_retention_limit is not supported on cache.t1.micro cache nodes"', args=[d.arg(name='snapshotRetentionLimit', type=d.T.number)]),
      withSnapshotRetentionLimit(snapshotRetentionLimit): { spec+: { forProvider+: { snapshotRetentionLimit: snapshotRetentionLimit } } },
      '#withSnapshotWindow':: d.fn(help='"Daily time range (in UTC) during which ElastiCache will begin taking a daily snapshot of your cache cluster. The minimum snapshot window is a 60 minute period. Example: 05:00-09:00"', args=[d.arg(name='snapshotWindow', type=d.T.string)]),
      withSnapshotWindow(snapshotWindow): { spec+: { forProvider+: { snapshotWindow: snapshotWindow } } },
      '#withSubnetGroupName':: d.fn(help='"Name of the cache subnet group to be used for the replication group."', args=[d.arg(name='subnetGroupName', type=d.T.string)]),
      withSubnetGroupName(subnetGroupName): { spec+: { forProvider+: { subnetGroupName: subnetGroupName } } },
      '#withTags':: d.fn(help='"Key-value map of resource tags."', args=[d.arg(name='tags', type=d.T.object)]),
      withTags(tags): { spec+: { forProvider+: { tags: tags } } },
      '#withTagsMixin':: d.fn(help='"Key-value map of resource tags."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tags', type=d.T.object)]),
      withTagsMixin(tags): { spec+: { forProvider+: { tags+: tags } } },
      '#withTransitEncryptionEnabled':: d.fn(help='"Whether to enable encryption in transit."', args=[d.arg(name='transitEncryptionEnabled', type=d.T.boolean)]),
      withTransitEncryptionEnabled(transitEncryptionEnabled): { spec+: { forProvider+: { transitEncryptionEnabled: transitEncryptionEnabled } } },
      '#withUserGroupIds':: d.fn(help='"User Group ID to associate with the replication group. Only a maximum of one (1) user group ID is valid. NOTE: This argument is a set because the AWS specification allows for multiple IDs. However, in practice, AWS only allows a maximum size of one."', args=[d.arg(name='userGroupIds', type=d.T.array)]),
      withUserGroupIds(userGroupIds): { spec+: { forProvider+: { userGroupIds: if std.isArray(v=userGroupIds) then userGroupIds else [userGroupIds] } } },
      '#withUserGroupIdsMixin':: d.fn(help='"User Group ID to associate with the replication group. Only a maximum of one (1) user group ID is valid. NOTE: This argument is a set because the AWS specification allows for multiple IDs. However, in practice, AWS only allows a maximum size of one."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='userGroupIds', type=d.T.array)]),
      withUserGroupIdsMixin(userGroupIds): { spec+: { forProvider+: { userGroupIds+: if std.isArray(v=userGroupIds) then userGroupIds else [userGroupIds] } } },
    },
    '#providerConfigRef':: d.obj(help='"ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured."'),
    providerConfigRef: {
      '#policy':: d.obj(help='"Policies for referencing."'),
      policy: {
        '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
        withResolution(resolution): { spec+: { providerConfigRef+: { policy+: { resolution: resolution } } } },
        '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
        withResolve(resolve): { spec+: { providerConfigRef+: { policy+: { resolve: resolve } } } },
      },
      '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { providerConfigRef+: { name: name } } },
    },
    '#providerRef':: d.obj(help='"ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`"'),
    providerRef: {
      '#policy':: d.obj(help='"Policies for referencing."'),
      policy: {
        '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
        withResolution(resolution): { spec+: { providerRef+: { policy+: { resolution: resolution } } } },
        '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
        withResolve(resolve): { spec+: { providerRef+: { policy+: { resolve: resolve } } } },
      },
      '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { providerRef+: { name: name } } },
    },
    '#publishConnectionDetailsTo':: d.obj(help='"PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource."'),
    publishConnectionDetailsTo: {
      '#configRef':: d.obj(help='"SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret."'),
      configRef: {
        '#policy':: d.obj(help='"Policies for referencing."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { publishConnectionDetailsTo+: { configRef+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { publishConnectionDetailsTo+: { configRef+: { policy+: { resolve: resolve } } } } },
        },
        '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { publishConnectionDetailsTo+: { configRef+: { name: name } } } },
      },
      '#metadata':: d.obj(help='"Metadata is the metadata for connection secret."'),
      metadata: {
        '#withAnnotations':: d.fn(help='"Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.annotations\\". - It is up to Secret Store implementation for others store types."', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { publishConnectionDetailsTo+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='"Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.annotations\\". - It is up to Secret Store implementation for others store types."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { publishConnectionDetailsTo+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='"Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.labels\\". - It is up to Secret Store implementation for others store types."', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { publishConnectionDetailsTo+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='"Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.labels\\". - It is up to Secret Store implementation for others store types."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { publishConnectionDetailsTo+: { metadata+: { labels+: labels } } } },
        '#withType':: d.fn(help='"Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores."', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { publishConnectionDetailsTo+: { metadata+: { type: type } } } },
      },
      '#withName':: d.fn(help='"Name is the name of the connection secret."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { publishConnectionDetailsTo+: { name: name } } },
    },
    '#withDeletionPolicy':: d.fn(help='"DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \\"Delete\\" or \\"Orphan\\" the external resource."', args=[d.arg(name='deletionPolicy', type=d.T.string)]),
    withDeletionPolicy(deletionPolicy): { spec+: { deletionPolicy: deletionPolicy } },
    '#writeConnectionSecretToRef':: d.obj(help='"WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other."'),
    writeConnectionSecretToRef: {
      '#withName':: d.fn(help='"Name of the secret."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { writeConnectionSecretToRef+: { name: name } } },
      '#withNamespace':: d.fn(help='"Namespace of the secret."', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { spec+: { writeConnectionSecretToRef+: { namespace: namespace } } },
    },
  },
  '#mixin': 'ignore',
  mixin: self,
}
