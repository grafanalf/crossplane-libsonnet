{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='management', url='', help='"Management is the Schema for the Managements API. Manages an API Management Service."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of Management', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'apimanagement.azure.upbound.io/v1beta1',
    kind: 'Management',
  } + self.metadata.withName(name=name) + self.metadata.withAnnotations(annotations={
    'tanka.dev/namespaced': 'false',
  }),
  '#spec':: d.obj(help='"ManagementSpec defines the desired state of Management"'),
  spec: {
    '#forProvider':: d.obj(help=''),
    forProvider: {
      '#additionalLocation':: d.obj(help='"One or more additional_location blocks as defined below."'),
      additionalLocation: {
        '#virtualNetworkConfiguration':: d.obj(help='"A virtual_network_configuration block as defined below.  Required when virtual_network_type is External or Internal."'),
        virtualNetworkConfiguration: {
          '#subnetIdRef':: d.obj(help='"Reference to a Subnet in network to populate subnetId."'),
          subnetIdRef: {
            '#policy':: d.obj(help='"Policies for referencing."'),
            policy: {
              '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
              withResolution(resolution): { subnetIdRef+: { policy+: { resolution: resolution } } },
              '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
              withResolve(resolve): { subnetIdRef+: { policy+: { resolve: resolve } } },
            },
            '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
            withName(name): { subnetIdRef+: { name: name } },
          },
          '#subnetIdSelector':: d.obj(help='"Selector for a Subnet in network to populate subnetId."'),
          subnetIdSelector: {
            '#policy':: d.obj(help='"Policies for selection."'),
            policy: {
              '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
              withResolution(resolution): { subnetIdSelector+: { policy+: { resolution: resolution } } },
              '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
              withResolve(resolve): { subnetIdSelector+: { policy+: { resolve: resolve } } },
            },
            '#withMatchControllerRef':: d.fn(help='"MatchControllerRef ensures an object with the same controller reference as the selecting object is selected."', args=[d.arg(name='matchControllerRef', type=d.T.boolean)]),
            withMatchControllerRef(matchControllerRef): { subnetIdSelector+: { matchControllerRef: matchControllerRef } },
            '#withMatchLabels':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabels(matchLabels): { subnetIdSelector+: { matchLabels: matchLabels } },
            '#withMatchLabelsMixin':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
            withMatchLabelsMixin(matchLabels): { subnetIdSelector+: { matchLabels+: matchLabels } },
          },
          '#withSubnetId':: d.fn(help='"The id of the subnet that will be used for the API Management."', args=[d.arg(name='subnetId', type=d.T.string)]),
          withSubnetId(subnetId): { subnetId: subnetId },
        },
        '#withCapacity':: d.fn(help='"The number of compute units in this region. Defaults to the capacity of the main region."', args=[d.arg(name='capacity', type=d.T.number)]),
        withCapacity(capacity): { capacity: capacity },
        '#withLocation':: d.fn(help='"The name of the Azure Region in which the API Management Service should be expanded to."', args=[d.arg(name='location', type=d.T.string)]),
        withLocation(location): { location: location },
        '#withPublicIpAddressId':: d.fn(help='"ID of a standard SKU IPv4 Public IP."', args=[d.arg(name='publicIpAddressId', type=d.T.string)]),
        withPublicIpAddressId(publicIpAddressId): { publicIpAddressId: publicIpAddressId },
        '#withVirtualNetworkConfiguration':: d.fn(help='"A virtual_network_configuration block as defined below.  Required when virtual_network_type is External or Internal."', args=[d.arg(name='virtualNetworkConfiguration', type=d.T.array)]),
        withVirtualNetworkConfiguration(virtualNetworkConfiguration): { virtualNetworkConfiguration: if std.isArray(v=virtualNetworkConfiguration) then virtualNetworkConfiguration else [virtualNetworkConfiguration] },
        '#withVirtualNetworkConfigurationMixin':: d.fn(help='"A virtual_network_configuration block as defined below.  Required when virtual_network_type is External or Internal."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='virtualNetworkConfiguration', type=d.T.array)]),
        withVirtualNetworkConfigurationMixin(virtualNetworkConfiguration): { virtualNetworkConfiguration+: if std.isArray(v=virtualNetworkConfiguration) then virtualNetworkConfiguration else [virtualNetworkConfiguration] },
        '#withZones':: d.fn(help='"A list of availability zones."', args=[d.arg(name='zones', type=d.T.array)]),
        withZones(zones): { zones: if std.isArray(v=zones) then zones else [zones] },
        '#withZonesMixin':: d.fn(help='"A list of availability zones."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='zones', type=d.T.array)]),
        withZonesMixin(zones): { zones+: if std.isArray(v=zones) then zones else [zones] },
      },
      '#certificate':: d.obj(help='"One or more (up to 10) certificate blocks as defined below."'),
      certificate: {
        '#certificatePasswordSecretRef':: d.obj(help='"The password for the certificate."'),
        certificatePasswordSecretRef: {
          '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { certificatePasswordSecretRef+: { key: key } },
          '#withName':: d.fn(help='"Name of the secret."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { certificatePasswordSecretRef+: { name: name } },
          '#withNamespace':: d.fn(help='"Namespace of the secret."', args=[d.arg(name='namespace', type=d.T.string)]),
          withNamespace(namespace): { certificatePasswordSecretRef+: { namespace: namespace } },
        },
        '#encodedCertificateSecretRef':: d.obj(help='"The Base64 Encoded PFX or Base64 Encoded X.509 Certificate."'),
        encodedCertificateSecretRef: {
          '#withKey':: d.fn(help='"The key to select."', args=[d.arg(name='key', type=d.T.string)]),
          withKey(key): { encodedCertificateSecretRef+: { key: key } },
          '#withName':: d.fn(help='"Name of the secret."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { encodedCertificateSecretRef+: { name: name } },
          '#withNamespace':: d.fn(help='"Namespace of the secret."', args=[d.arg(name='namespace', type=d.T.string)]),
          withNamespace(namespace): { encodedCertificateSecretRef+: { namespace: namespace } },
        },
        '#withStoreName':: d.fn(help='"The name of the Certificate Store where this certificate should be stored. Possible values are CertificateAuthority and Root."', args=[d.arg(name='storeName', type=d.T.string)]),
        withStoreName(storeName): { storeName: storeName },
      },
      '#identity':: d.obj(help='"An identity block as defined below."'),
      identity: {
        '#withIdentityIds':: d.fn(help='"A list of User Assigned Managed Identity IDs to be assigned to this API Management Service."', args=[d.arg(name='identityIds', type=d.T.array)]),
        withIdentityIds(identityIds): { identityIds: if std.isArray(v=identityIds) then identityIds else [identityIds] },
        '#withIdentityIdsMixin':: d.fn(help='"A list of User Assigned Managed Identity IDs to be assigned to this API Management Service."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='identityIds', type=d.T.array)]),
        withIdentityIdsMixin(identityIds): { identityIds+: if std.isArray(v=identityIds) then identityIds else [identityIds] },
        '#withType':: d.fn(help='"Specifies the type of Managed Service Identity that should be configured on this API Management Service. Possible values are SystemAssigned, UserAssigned, SystemAssigned, UserAssigned (to enable both)."', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { type: type },
      },
      '#policy':: d.obj(help='"A policy block as defined below."'),
      policy: {
        '#withXmlContent':: d.fn(help='"The XML Content for this Policy."', args=[d.arg(name='xmlContent', type=d.T.string)]),
        withXmlContent(xmlContent): { xmlContent: xmlContent },
        '#withXmlLink':: d.fn(help='"A link to an API Management Policy XML Document, which must be publicly available."', args=[d.arg(name='xmlLink', type=d.T.string)]),
        withXmlLink(xmlLink): { xmlLink: xmlLink },
      },
      '#protocols':: d.obj(help='"A protocols block as defined below."'),
      protocols: {
        '#withEnableHttp2':: d.fn(help='"Should HTTP/2 be supported by the API Management Service? Defaults to false."', args=[d.arg(name='enableHttp2', type=d.T.boolean)]),
        withEnableHttp2(enableHttp2): { enableHttp2: enableHttp2 },
      },
      '#resourceGroupNameRef':: d.obj(help='"Reference to a ResourceGroup in azure to populate resourceGroupName."'),
      resourceGroupNameRef: {
        '#policy':: d.obj(help='"Policies for referencing."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { forProvider+: { resourceGroupNameRef+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { forProvider+: { resourceGroupNameRef+: { policy+: { resolve: resolve } } } } },
        },
        '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { forProvider+: { resourceGroupNameRef+: { name: name } } } },
      },
      '#resourceGroupNameSelector':: d.obj(help='"Selector for a ResourceGroup in azure to populate resourceGroupName."'),
      resourceGroupNameSelector: {
        '#policy':: d.obj(help='"Policies for selection."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { forProvider+: { resourceGroupNameSelector+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { forProvider+: { resourceGroupNameSelector+: { policy+: { resolve: resolve } } } } },
        },
        '#withMatchControllerRef':: d.fn(help='"MatchControllerRef ensures an object with the same controller reference as the selecting object is selected."', args=[d.arg(name='matchControllerRef', type=d.T.boolean)]),
        withMatchControllerRef(matchControllerRef): { spec+: { forProvider+: { resourceGroupNameSelector+: { matchControllerRef: matchControllerRef } } } },
        '#withMatchLabels':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabels(matchLabels): { spec+: { forProvider+: { resourceGroupNameSelector+: { matchLabels: matchLabels } } } },
        '#withMatchLabelsMixin':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabelsMixin(matchLabels): { spec+: { forProvider+: { resourceGroupNameSelector+: { matchLabels+: matchLabels } } } },
      },
      '#security':: d.obj(help='"A security block as defined below."'),
      security: {
        '#withEnableBackendSsl30':: d.fn(help='"Should SSL 3.0 be enabled on the backend of the gateway? Defaults to false."', args=[d.arg(name='enableBackendSsl30', type=d.T.boolean)]),
        withEnableBackendSsl30(enableBackendSsl30): { enableBackendSsl30: enableBackendSsl30 },
        '#withEnableBackendTls10':: d.fn(help='"Should TLS 1.0 be enabled on the backend of the gateway? Defaults to false."', args=[d.arg(name='enableBackendTls10', type=d.T.boolean)]),
        withEnableBackendTls10(enableBackendTls10): { enableBackendTls10: enableBackendTls10 },
        '#withEnableBackendTls11':: d.fn(help='"Should TLS 1.1 be enabled on the backend of the gateway? Defaults to false."', args=[d.arg(name='enableBackendTls11', type=d.T.boolean)]),
        withEnableBackendTls11(enableBackendTls11): { enableBackendTls11: enableBackendTls11 },
        '#withEnableFrontendSsl30':: d.fn(help='"Should SSL 3.0 be enabled on the frontend of the gateway? Defaults to false."', args=[d.arg(name='enableFrontendSsl30', type=d.T.boolean)]),
        withEnableFrontendSsl30(enableFrontendSsl30): { enableFrontendSsl30: enableFrontendSsl30 },
        '#withEnableFrontendTls10':: d.fn(help='"Should TLS 1.0 be enabled on the frontend of the gateway? Defaults to false."', args=[d.arg(name='enableFrontendTls10', type=d.T.boolean)]),
        withEnableFrontendTls10(enableFrontendTls10): { enableFrontendTls10: enableFrontendTls10 },
        '#withEnableFrontendTls11':: d.fn(help='"Should TLS 1.1 be enabled on the frontend of the gateway? Defaults to false."', args=[d.arg(name='enableFrontendTls11', type=d.T.boolean)]),
        withEnableFrontendTls11(enableFrontendTls11): { enableFrontendTls11: enableFrontendTls11 },
        '#withTlsEcdheEcdsaWithAes128CbcShaCiphersEnabled':: d.fn(help='"Should the TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA cipher be enabled? Defaults to false."', args=[d.arg(name='tlsEcdheEcdsaWithAes128CbcShaCiphersEnabled', type=d.T.boolean)]),
        withTlsEcdheEcdsaWithAes128CbcShaCiphersEnabled(tlsEcdheEcdsaWithAes128CbcShaCiphersEnabled): { tlsEcdheEcdsaWithAes128CbcShaCiphersEnabled: tlsEcdheEcdsaWithAes128CbcShaCiphersEnabled },
        '#withTlsEcdheEcdsaWithAes256CbcShaCiphersEnabled':: d.fn(help='"Should the TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA cipher be enabled? Defaults to false."', args=[d.arg(name='tlsEcdheEcdsaWithAes256CbcShaCiphersEnabled', type=d.T.boolean)]),
        withTlsEcdheEcdsaWithAes256CbcShaCiphersEnabled(tlsEcdheEcdsaWithAes256CbcShaCiphersEnabled): { tlsEcdheEcdsaWithAes256CbcShaCiphersEnabled: tlsEcdheEcdsaWithAes256CbcShaCiphersEnabled },
        '#withTlsEcdheRsaWithAes128CbcShaCiphersEnabled':: d.fn(help='', args=[d.arg(name='tlsEcdheRsaWithAes128CbcShaCiphersEnabled', type=d.T.boolean)]),
        withTlsEcdheRsaWithAes128CbcShaCiphersEnabled(tlsEcdheRsaWithAes128CbcShaCiphersEnabled): { tlsEcdheRsaWithAes128CbcShaCiphersEnabled: tlsEcdheRsaWithAes128CbcShaCiphersEnabled },
        '#withTlsEcdheRsaWithAes256CbcShaCiphersEnabled':: d.fn(help='', args=[d.arg(name='tlsEcdheRsaWithAes256CbcShaCiphersEnabled', type=d.T.boolean)]),
        withTlsEcdheRsaWithAes256CbcShaCiphersEnabled(tlsEcdheRsaWithAes256CbcShaCiphersEnabled): { tlsEcdheRsaWithAes256CbcShaCiphersEnabled: tlsEcdheRsaWithAes256CbcShaCiphersEnabled },
        '#withTlsRsaWithAes128CbcSha256CiphersEnabled':: d.fn(help='"Should the TLS_RSA_WITH_AES_128_CBC_SHA256 cipher be enabled? Defaults to false."', args=[d.arg(name='tlsRsaWithAes128CbcSha256CiphersEnabled', type=d.T.boolean)]),
        withTlsRsaWithAes128CbcSha256CiphersEnabled(tlsRsaWithAes128CbcSha256CiphersEnabled): { tlsRsaWithAes128CbcSha256CiphersEnabled: tlsRsaWithAes128CbcSha256CiphersEnabled },
        '#withTlsRsaWithAes128CbcShaCiphersEnabled':: d.fn(help='"Should the TLS_RSA_WITH_AES_128_CBC_SHA cipher be enabled? Defaults to false."', args=[d.arg(name='tlsRsaWithAes128CbcShaCiphersEnabled', type=d.T.boolean)]),
        withTlsRsaWithAes128CbcShaCiphersEnabled(tlsRsaWithAes128CbcShaCiphersEnabled): { tlsRsaWithAes128CbcShaCiphersEnabled: tlsRsaWithAes128CbcShaCiphersEnabled },
        '#withTlsRsaWithAes128GcmSha256CiphersEnabled':: d.fn(help='"Should the TLS_RSA_WITH_AES_128_GCM_SHA256 cipher be enabled? Defaults to false."', args=[d.arg(name='tlsRsaWithAes128GcmSha256CiphersEnabled', type=d.T.boolean)]),
        withTlsRsaWithAes128GcmSha256CiphersEnabled(tlsRsaWithAes128GcmSha256CiphersEnabled): { tlsRsaWithAes128GcmSha256CiphersEnabled: tlsRsaWithAes128GcmSha256CiphersEnabled },
        '#withTlsRsaWithAes256CbcSha256CiphersEnabled':: d.fn(help='"Should the TLS_RSA_WITH_AES_256_CBC_SHA256 cipher be enabled? Defaults to false."', args=[d.arg(name='tlsRsaWithAes256CbcSha256CiphersEnabled', type=d.T.boolean)]),
        withTlsRsaWithAes256CbcSha256CiphersEnabled(tlsRsaWithAes256CbcSha256CiphersEnabled): { tlsRsaWithAes256CbcSha256CiphersEnabled: tlsRsaWithAes256CbcSha256CiphersEnabled },
        '#withTlsRsaWithAes256CbcShaCiphersEnabled':: d.fn(help='"Should the TLS_RSA_WITH_AES_256_CBC_SHA cipher be enabled? Defaults to false."', args=[d.arg(name='tlsRsaWithAes256CbcShaCiphersEnabled', type=d.T.boolean)]),
        withTlsRsaWithAes256CbcShaCiphersEnabled(tlsRsaWithAes256CbcShaCiphersEnabled): { tlsRsaWithAes256CbcShaCiphersEnabled: tlsRsaWithAes256CbcShaCiphersEnabled },
        '#withTripleDesCiphersEnabled':: d.fn(help='"Should the TLS_RSA_WITH_3DES_EDE_CBC_SHA cipher be enabled for alL TLS versions (1.0, 1.1 and 1.2)? Defaults to false."', args=[d.arg(name='tripleDesCiphersEnabled', type=d.T.boolean)]),
        withTripleDesCiphersEnabled(tripleDesCiphersEnabled): { tripleDesCiphersEnabled: tripleDesCiphersEnabled },
      },
      '#signIn':: d.obj(help='"A sign_in block as defined below."'),
      signIn: {
        '#withEnabled':: d.fn(help='"Should anonymous users be redirected to the sign in page?"', args=[d.arg(name='enabled', type=d.T.boolean)]),
        withEnabled(enabled): { enabled: enabled },
      },
      '#signUp':: d.obj(help='"A sign_up block as defined below."'),
      signUp: {
        '#termsOfService':: d.obj(help='"A terms_of_service block as defined below."'),
        termsOfService: {
          '#withConsentRequired':: d.fn(help='"Should the user be asked for consent during sign up?"', args=[d.arg(name='consentRequired', type=d.T.boolean)]),
          withConsentRequired(consentRequired): { consentRequired: consentRequired },
          '#withEnabled':: d.fn(help='"Should Terms of Service be displayed during sign up?."', args=[d.arg(name='enabled', type=d.T.boolean)]),
          withEnabled(enabled): { enabled: enabled },
          '#withText':: d.fn(help='"The Terms of Service which users are required to agree to in order to sign up."', args=[d.arg(name='text', type=d.T.string)]),
          withText(text): { text: text },
        },
        '#withEnabled':: d.fn(help='"Can users sign up on the development portal?"', args=[d.arg(name='enabled', type=d.T.boolean)]),
        withEnabled(enabled): { enabled: enabled },
        '#withTermsOfService':: d.fn(help='"A terms_of_service block as defined below."', args=[d.arg(name='termsOfService', type=d.T.array)]),
        withTermsOfService(termsOfService): { termsOfService: if std.isArray(v=termsOfService) then termsOfService else [termsOfService] },
        '#withTermsOfServiceMixin':: d.fn(help='"A terms_of_service block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='termsOfService', type=d.T.array)]),
        withTermsOfServiceMixin(termsOfService): { termsOfService+: if std.isArray(v=termsOfService) then termsOfService else [termsOfService] },
      },
      '#tenantAccess':: d.obj(help='"A tenant_access block as defined below."'),
      tenantAccess: {
        '#withEnabled':: d.fn(help='"Should the access to the management API be enabled?"', args=[d.arg(name='enabled', type=d.T.boolean)]),
        withEnabled(enabled): { enabled: enabled },
      },
      '#virtualNetworkConfiguration':: d.obj(help='"A virtual_network_configuration block as defined below. Required when virtual_network_type is External or Internal."'),
      virtualNetworkConfiguration: {
        '#subnetIdRef':: d.obj(help='"Reference to a Subnet in network to populate subnetId."'),
        subnetIdRef: {
          '#policy':: d.obj(help='"Policies for referencing."'),
          policy: {
            '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
            withResolution(resolution): { subnetIdRef+: { policy+: { resolution: resolution } } },
            '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
            withResolve(resolve): { subnetIdRef+: { policy+: { resolve: resolve } } },
          },
          '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { subnetIdRef+: { name: name } },
        },
        '#subnetIdSelector':: d.obj(help='"Selector for a Subnet in network to populate subnetId."'),
        subnetIdSelector: {
          '#policy':: d.obj(help='"Policies for selection."'),
          policy: {
            '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
            withResolution(resolution): { subnetIdSelector+: { policy+: { resolution: resolution } } },
            '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
            withResolve(resolve): { subnetIdSelector+: { policy+: { resolve: resolve } } },
          },
          '#withMatchControllerRef':: d.fn(help='"MatchControllerRef ensures an object with the same controller reference as the selecting object is selected."', args=[d.arg(name='matchControllerRef', type=d.T.boolean)]),
          withMatchControllerRef(matchControllerRef): { subnetIdSelector+: { matchControllerRef: matchControllerRef } },
          '#withMatchLabels':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabels(matchLabels): { subnetIdSelector+: { matchLabels: matchLabels } },
          '#withMatchLabelsMixin':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
          withMatchLabelsMixin(matchLabels): { subnetIdSelector+: { matchLabels+: matchLabels } },
        },
        '#withSubnetId':: d.fn(help='"The id of the subnet that will be used for the API Management."', args=[d.arg(name='subnetId', type=d.T.string)]),
        withSubnetId(subnetId): { subnetId: subnetId },
      },
      '#withAdditionalLocation':: d.fn(help='"One or more additional_location blocks as defined below."', args=[d.arg(name='additionalLocation', type=d.T.array)]),
      withAdditionalLocation(additionalLocation): { spec+: { forProvider+: { additionalLocation: if std.isArray(v=additionalLocation) then additionalLocation else [additionalLocation] } } },
      '#withAdditionalLocationMixin':: d.fn(help='"One or more additional_location blocks as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='additionalLocation', type=d.T.array)]),
      withAdditionalLocationMixin(additionalLocation): { spec+: { forProvider+: { additionalLocation+: if std.isArray(v=additionalLocation) then additionalLocation else [additionalLocation] } } },
      '#withCertificate':: d.fn(help='"One or more (up to 10) certificate blocks as defined below."', args=[d.arg(name='certificate', type=d.T.array)]),
      withCertificate(certificate): { spec+: { forProvider+: { certificate: if std.isArray(v=certificate) then certificate else [certificate] } } },
      '#withCertificateMixin':: d.fn(help='"One or more (up to 10) certificate blocks as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='certificate', type=d.T.array)]),
      withCertificateMixin(certificate): { spec+: { forProvider+: { certificate+: if std.isArray(v=certificate) then certificate else [certificate] } } },
      '#withClientCertificateEnabled':: d.fn(help='"Enforce a client certificate to be presented on each request to the gateway? This is only supported when SKU type is Consumption."', args=[d.arg(name='clientCertificateEnabled', type=d.T.boolean)]),
      withClientCertificateEnabled(clientCertificateEnabled): { spec+: { forProvider+: { clientCertificateEnabled: clientCertificateEnabled } } },
      '#withGatewayDisabled':: d.fn(help='"Disable the gateway in main region? This is only supported when additional_location is set."', args=[d.arg(name='gatewayDisabled', type=d.T.boolean)]),
      withGatewayDisabled(gatewayDisabled): { spec+: { forProvider+: { gatewayDisabled: gatewayDisabled } } },
      '#withIdentity':: d.fn(help='"An identity block as defined below."', args=[d.arg(name='identity', type=d.T.array)]),
      withIdentity(identity): { spec+: { forProvider+: { identity: if std.isArray(v=identity) then identity else [identity] } } },
      '#withIdentityMixin':: d.fn(help='"An identity block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='identity', type=d.T.array)]),
      withIdentityMixin(identity): { spec+: { forProvider+: { identity+: if std.isArray(v=identity) then identity else [identity] } } },
      '#withLocation':: d.fn(help='"The Azure location where the API Management Service exists. Changing this forces a new resource to be created."', args=[d.arg(name='location', type=d.T.string)]),
      withLocation(location): { spec+: { forProvider+: { location: location } } },
      '#withMinApiVersion':: d.fn(help='"The version which the control plane API calls to API Management service are limited with version equal to or newer than."', args=[d.arg(name='minApiVersion', type=d.T.string)]),
      withMinApiVersion(minApiVersion): { spec+: { forProvider+: { minApiVersion: minApiVersion } } },
      '#withNotificationSenderEmail':: d.fn(help='"Email address from which the notification will be sent."', args=[d.arg(name='notificationSenderEmail', type=d.T.string)]),
      withNotificationSenderEmail(notificationSenderEmail): { spec+: { forProvider+: { notificationSenderEmail: notificationSenderEmail } } },
      '#withPolicy':: d.fn(help='"A policy block as defined below."', args=[d.arg(name='policy', type=d.T.array)]),
      withPolicy(policy): { spec+: { forProvider+: { policy: if std.isArray(v=policy) then policy else [policy] } } },
      '#withPolicyMixin':: d.fn(help='"A policy block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='policy', type=d.T.array)]),
      withPolicyMixin(policy): { spec+: { forProvider+: { policy+: if std.isArray(v=policy) then policy else [policy] } } },
      '#withProtocols':: d.fn(help='"A protocols block as defined below."', args=[d.arg(name='protocols', type=d.T.array)]),
      withProtocols(protocols): { spec+: { forProvider+: { protocols: if std.isArray(v=protocols) then protocols else [protocols] } } },
      '#withProtocolsMixin':: d.fn(help='"A protocols block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='protocols', type=d.T.array)]),
      withProtocolsMixin(protocols): { spec+: { forProvider+: { protocols+: if std.isArray(v=protocols) then protocols else [protocols] } } },
      '#withPublicIpAddressId':: d.fn(help='"ID of a standard SKU IPv4 Public IP."', args=[d.arg(name='publicIpAddressId', type=d.T.string)]),
      withPublicIpAddressId(publicIpAddressId): { spec+: { forProvider+: { publicIpAddressId: publicIpAddressId } } },
      '#withPublicNetworkAccessEnabled':: d.fn(help='"Is public access to the service allowed?. Defaults to true"', args=[d.arg(name='publicNetworkAccessEnabled', type=d.T.boolean)]),
      withPublicNetworkAccessEnabled(publicNetworkAccessEnabled): { spec+: { forProvider+: { publicNetworkAccessEnabled: publicNetworkAccessEnabled } } },
      '#withPublisherEmail':: d.fn(help='"The email of publisher/company."', args=[d.arg(name='publisherEmail', type=d.T.string)]),
      withPublisherEmail(publisherEmail): { spec+: { forProvider+: { publisherEmail: publisherEmail } } },
      '#withPublisherName':: d.fn(help='"The name of publisher/company."', args=[d.arg(name='publisherName', type=d.T.string)]),
      withPublisherName(publisherName): { spec+: { forProvider+: { publisherName: publisherName } } },
      '#withResourceGroupName':: d.fn(help='"The name of the Resource Group in which the API Management Service should be exist. Changing this forces a new resource to be created."', args=[d.arg(name='resourceGroupName', type=d.T.string)]),
      withResourceGroupName(resourceGroupName): { spec+: { forProvider+: { resourceGroupName: resourceGroupName } } },
      '#withSecurity':: d.fn(help='"A security block as defined below."', args=[d.arg(name='security', type=d.T.array)]),
      withSecurity(security): { spec+: { forProvider+: { security: if std.isArray(v=security) then security else [security] } } },
      '#withSecurityMixin':: d.fn(help='"A security block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='security', type=d.T.array)]),
      withSecurityMixin(security): { spec+: { forProvider+: { security+: if std.isArray(v=security) then security else [security] } } },
      '#withSignIn':: d.fn(help='"A sign_in block as defined below."', args=[d.arg(name='signIn', type=d.T.array)]),
      withSignIn(signIn): { spec+: { forProvider+: { signIn: if std.isArray(v=signIn) then signIn else [signIn] } } },
      '#withSignInMixin':: d.fn(help='"A sign_in block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='signIn', type=d.T.array)]),
      withSignInMixin(signIn): { spec+: { forProvider+: { signIn+: if std.isArray(v=signIn) then signIn else [signIn] } } },
      '#withSignUp':: d.fn(help='"A sign_up block as defined below."', args=[d.arg(name='signUp', type=d.T.array)]),
      withSignUp(signUp): { spec+: { forProvider+: { signUp: if std.isArray(v=signUp) then signUp else [signUp] } } },
      '#withSignUpMixin':: d.fn(help='"A sign_up block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='signUp', type=d.T.array)]),
      withSignUpMixin(signUp): { spec+: { forProvider+: { signUp+: if std.isArray(v=signUp) then signUp else [signUp] } } },
      '#withSkuName':: d.fn(help='"sku_name is a string consisting of two parts separated by an underscore(_). The first part is the name, valid values include: Consumption, Developer, Basic, Standard and Premium. The second part is the capacity (e.g. the number of deployed units of the sku), which must be a positive integer (e.g. Developer_1)."', args=[d.arg(name='skuName', type=d.T.string)]),
      withSkuName(skuName): { spec+: { forProvider+: { skuName: skuName } } },
      '#withTags':: d.fn(help='"A mapping of tags assigned to the resource."', args=[d.arg(name='tags', type=d.T.object)]),
      withTags(tags): { spec+: { forProvider+: { tags: tags } } },
      '#withTagsMixin':: d.fn(help='"A mapping of tags assigned to the resource."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tags', type=d.T.object)]),
      withTagsMixin(tags): { spec+: { forProvider+: { tags+: tags } } },
      '#withTenantAccess':: d.fn(help='"A tenant_access block as defined below."', args=[d.arg(name='tenantAccess', type=d.T.array)]),
      withTenantAccess(tenantAccess): { spec+: { forProvider+: { tenantAccess: if std.isArray(v=tenantAccess) then tenantAccess else [tenantAccess] } } },
      '#withTenantAccessMixin':: d.fn(help='"A tenant_access block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tenantAccess', type=d.T.array)]),
      withTenantAccessMixin(tenantAccess): { spec+: { forProvider+: { tenantAccess+: if std.isArray(v=tenantAccess) then tenantAccess else [tenantAccess] } } },
      '#withVirtualNetworkConfiguration':: d.fn(help='"A virtual_network_configuration block as defined below. Required when virtual_network_type is External or Internal."', args=[d.arg(name='virtualNetworkConfiguration', type=d.T.array)]),
      withVirtualNetworkConfiguration(virtualNetworkConfiguration): { spec+: { forProvider+: { virtualNetworkConfiguration: if std.isArray(v=virtualNetworkConfiguration) then virtualNetworkConfiguration else [virtualNetworkConfiguration] } } },
      '#withVirtualNetworkConfigurationMixin':: d.fn(help='"A virtual_network_configuration block as defined below. Required when virtual_network_type is External or Internal."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='virtualNetworkConfiguration', type=d.T.array)]),
      withVirtualNetworkConfigurationMixin(virtualNetworkConfiguration): { spec+: { forProvider+: { virtualNetworkConfiguration+: if std.isArray(v=virtualNetworkConfiguration) then virtualNetworkConfiguration else [virtualNetworkConfiguration] } } },
      '#withVirtualNetworkType':: d.fn(help='"The type of virtual network you want to use, valid values include: None, External, Internal."', args=[d.arg(name='virtualNetworkType', type=d.T.string)]),
      withVirtualNetworkType(virtualNetworkType): { spec+: { forProvider+: { virtualNetworkType: virtualNetworkType } } },
      '#withZones':: d.fn(help='"Specifies a list of Availability Zones in which this API Management service should be located. Changing this forces a new API Management service to be created."', args=[d.arg(name='zones', type=d.T.array)]),
      withZones(zones): { spec+: { forProvider+: { zones: if std.isArray(v=zones) then zones else [zones] } } },
      '#withZonesMixin':: d.fn(help='"Specifies a list of Availability Zones in which this API Management service should be located. Changing this forces a new API Management service to be created."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='zones', type=d.T.array)]),
      withZonesMixin(zones): { spec+: { forProvider+: { zones+: if std.isArray(v=zones) then zones else [zones] } } },
    },
    '#providerConfigRef':: d.obj(help='"ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured."'),
    providerConfigRef: {
      '#policy':: d.obj(help='"Policies for referencing."'),
      policy: {
        '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
        withResolution(resolution): { spec+: { providerConfigRef+: { policy+: { resolution: resolution } } } },
        '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
        withResolve(resolve): { spec+: { providerConfigRef+: { policy+: { resolve: resolve } } } },
      },
      '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { providerConfigRef+: { name: name } } },
    },
    '#providerRef':: d.obj(help='"ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`"'),
    providerRef: {
      '#policy':: d.obj(help='"Policies for referencing."'),
      policy: {
        '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
        withResolution(resolution): { spec+: { providerRef+: { policy+: { resolution: resolution } } } },
        '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
        withResolve(resolve): { spec+: { providerRef+: { policy+: { resolve: resolve } } } },
      },
      '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { providerRef+: { name: name } } },
    },
    '#publishConnectionDetailsTo':: d.obj(help='"PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource."'),
    publishConnectionDetailsTo: {
      '#configRef':: d.obj(help='"SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret."'),
      configRef: {
        '#policy':: d.obj(help='"Policies for referencing."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { publishConnectionDetailsTo+: { configRef+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { publishConnectionDetailsTo+: { configRef+: { policy+: { resolve: resolve } } } } },
        },
        '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { publishConnectionDetailsTo+: { configRef+: { name: name } } } },
      },
      '#metadata':: d.obj(help='"Metadata is the metadata for connection secret."'),
      metadata: {
        '#withAnnotations':: d.fn(help='"Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.annotations\\". - It is up to Secret Store implementation for others store types."', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { publishConnectionDetailsTo+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='"Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.annotations\\". - It is up to Secret Store implementation for others store types."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { publishConnectionDetailsTo+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='"Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.labels\\". - It is up to Secret Store implementation for others store types."', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { publishConnectionDetailsTo+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='"Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.labels\\". - It is up to Secret Store implementation for others store types."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { publishConnectionDetailsTo+: { metadata+: { labels+: labels } } } },
        '#withType':: d.fn(help='"Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores."', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { publishConnectionDetailsTo+: { metadata+: { type: type } } } },
      },
      '#withName':: d.fn(help='"Name is the name of the connection secret."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { publishConnectionDetailsTo+: { name: name } } },
    },
    '#withDeletionPolicy':: d.fn(help='"DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \\"Delete\\" or \\"Orphan\\" the external resource."', args=[d.arg(name='deletionPolicy', type=d.T.string)]),
    withDeletionPolicy(deletionPolicy): { spec+: { deletionPolicy: deletionPolicy } },
    '#writeConnectionSecretToRef':: d.obj(help='"WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other."'),
    writeConnectionSecretToRef: {
      '#withName':: d.fn(help='"Name of the secret."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { writeConnectionSecretToRef+: { name: name } } },
      '#withNamespace':: d.fn(help='"Namespace of the secret."', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { spec+: { writeConnectionSecretToRef+: { namespace: namespace } } },
    },
  },
  '#mixin': 'ignore',
  mixin: self,
}
