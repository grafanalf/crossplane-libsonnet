{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='firewallPolicy', url='', help='"FirewallPolicy is the Schema for the FirewallPolicys API. Manages a Firewall Policy."'),
  '#metadata':: d.obj(help='"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create."'),
  metadata: {
    '#withAnnotations':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withClusterName':: d.fn(help='"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."', args=[d.arg(name='clusterName', type=d.T.string)]),
    withClusterName(clusterName): { metadata+: { clusterName: clusterName } },
    '#withCreationTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='creationTimestamp', type=d.T.string)]),
    withCreationTimestamp(creationTimestamp): { metadata+: { creationTimestamp: creationTimestamp } },
    '#withDeletionGracePeriodSeconds':: d.fn(help='"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."', args=[d.arg(name='deletionGracePeriodSeconds', type=d.T.integer)]),
    withDeletionGracePeriodSeconds(deletionGracePeriodSeconds): { metadata+: { deletionGracePeriodSeconds: deletionGracePeriodSeconds } },
    '#withDeletionTimestamp':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='deletionTimestamp', type=d.T.string)]),
    withDeletionTimestamp(deletionTimestamp): { metadata+: { deletionTimestamp: deletionTimestamp } },
    '#withFinalizers':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizers(finalizers): { metadata+: { finalizers: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withFinalizersMixin':: d.fn(help='"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='finalizers', type=d.T.array)]),
    withFinalizersMixin(finalizers): { metadata+: { finalizers+: if std.isArray(v=finalizers) then finalizers else [finalizers] } },
    '#withGenerateName':: d.fn(help='"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency"', args=[d.arg(name='generateName', type=d.T.string)]),
    withGenerateName(generateName): { metadata+: { generateName: generateName } },
    '#withGeneration':: d.fn(help='"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."', args=[d.arg(name='generation', type=d.T.integer)]),
    withGeneration(generation): { metadata+: { generation: generation } },
    '#withLabels':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
    '#withName':: d.fn(help='"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { metadata+: { name: name } },
    '#withNamespace':: d.fn(help='"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\"default\\" namespace, but \\"default\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"', args=[d.arg(name='namespace', type=d.T.string)]),
    withNamespace(namespace): { metadata+: { namespace: namespace } },
    '#withOwnerReferences':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferences(ownerReferences): { metadata+: { ownerReferences: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withOwnerReferencesMixin':: d.fn(help='"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ownerReferences', type=d.T.array)]),
    withOwnerReferencesMixin(ownerReferences): { metadata+: { ownerReferences+: if std.isArray(v=ownerReferences) then ownerReferences else [ownerReferences] } },
    '#withResourceVersion':: d.fn(help='"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency"', args=[d.arg(name='resourceVersion', type=d.T.string)]),
    withResourceVersion(resourceVersion): { metadata+: { resourceVersion: resourceVersion } },
    '#withSelfLink':: d.fn(help='"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release."', args=[d.arg(name='selfLink', type=d.T.string)]),
    withSelfLink(selfLink): { metadata+: { selfLink: selfLink } },
    '#withUid':: d.fn(help='"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"', args=[d.arg(name='uid', type=d.T.string)]),
    withUid(uid): { metadata+: { uid: uid } },
  },
  '#new':: d.fn(help='new returns an instance of FirewallPolicy', args=[d.arg(name='name', type=d.T.string)]),
  new(name): {
    apiVersion: 'network.azure.upbound.io/v1beta1',
    kind: 'FirewallPolicy',
  } + self.metadata.withName(name=name) + self.metadata.withAnnotations(annotations={
    'tanka.dev/namespaced': 'false',
  }),
  '#spec':: d.obj(help='"FirewallPolicySpec defines the desired state of FirewallPolicy"'),
  spec: {
    '#forProvider':: d.obj(help=''),
    forProvider: {
      '#dns':: d.obj(help='"A dns block as defined below."'),
      dns: {
        '#withProxyEnabled':: d.fn(help='"Whether to enable DNS proxy on Firewalls attached to this Firewall Policy? Defaults to false."', args=[d.arg(name='proxyEnabled', type=d.T.boolean)]),
        withProxyEnabled(proxyEnabled): { proxyEnabled: proxyEnabled },
        '#withServers':: d.fn(help="\"A list of custom DNS servers' IP addresses.\"", args=[d.arg(name='servers', type=d.T.array)]),
        withServers(servers): { servers: if std.isArray(v=servers) then servers else [servers] },
        '#withServersMixin':: d.fn(help="\"A list of custom DNS servers' IP addresses.\"\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='servers', type=d.T.array)]),
        withServersMixin(servers): { servers+: if std.isArray(v=servers) then servers else [servers] },
      },
      '#identity':: d.obj(help='"An identity block as defined below."'),
      identity: {
        '#withIdentityIds':: d.fn(help='"Specifies a list of User Assigned Managed Identity IDs to be assigned to this Firewall Policy."', args=[d.arg(name='identityIds', type=d.T.array)]),
        withIdentityIds(identityIds): { identityIds: if std.isArray(v=identityIds) then identityIds else [identityIds] },
        '#withIdentityIdsMixin':: d.fn(help='"Specifies a list of User Assigned Managed Identity IDs to be assigned to this Firewall Policy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='identityIds', type=d.T.array)]),
        withIdentityIdsMixin(identityIds): { identityIds+: if std.isArray(v=identityIds) then identityIds else [identityIds] },
        '#withType':: d.fn(help='"Specifies the type of Managed Service Identity that should be configured on this Firewall Policy. Only possible value is UserAssigned."', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { type: type },
      },
      '#insights':: d.obj(help='"An insights block as defined below."'),
      insights: {
        '#logAnalyticsWorkspace':: d.obj(help='"A list of log_analytics_workspace block as defined below."'),
        logAnalyticsWorkspace: {
          '#withFirewallLocation':: d.fn(help='"The location of the Firewalls, that when matches this Log Analytics Workspace will be used to consume their logs."', args=[d.arg(name='firewallLocation', type=d.T.string)]),
          withFirewallLocation(firewallLocation): { firewallLocation: firewallLocation },
          '#withId':: d.fn(help='"12-digit number (id) which identifies your signature."', args=[d.arg(name='id', type=d.T.string)]),
          withId(id): { id: id },
        },
        '#withDefaultLogAnalyticsWorkspaceId':: d.fn(help='"The ID of the default Log Analytics Workspace that the Firewalls associated with this Firewall Policy will send their logs to, when there is no location matches in the log_analytics_workspace."', args=[d.arg(name='defaultLogAnalyticsWorkspaceId', type=d.T.string)]),
        withDefaultLogAnalyticsWorkspaceId(defaultLogAnalyticsWorkspaceId): { defaultLogAnalyticsWorkspaceId: defaultLogAnalyticsWorkspaceId },
        '#withEnabled':: d.fn(help='"Whether the insights functionality is enabled for this Firewall Policy."', args=[d.arg(name='enabled', type=d.T.boolean)]),
        withEnabled(enabled): { enabled: enabled },
        '#withLogAnalyticsWorkspace':: d.fn(help='"A list of log_analytics_workspace block as defined below."', args=[d.arg(name='logAnalyticsWorkspace', type=d.T.array)]),
        withLogAnalyticsWorkspace(logAnalyticsWorkspace): { logAnalyticsWorkspace: if std.isArray(v=logAnalyticsWorkspace) then logAnalyticsWorkspace else [logAnalyticsWorkspace] },
        '#withLogAnalyticsWorkspaceMixin':: d.fn(help='"A list of log_analytics_workspace block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='logAnalyticsWorkspace', type=d.T.array)]),
        withLogAnalyticsWorkspaceMixin(logAnalyticsWorkspace): { logAnalyticsWorkspace+: if std.isArray(v=logAnalyticsWorkspace) then logAnalyticsWorkspace else [logAnalyticsWorkspace] },
        '#withRetentionInDays':: d.fn(help='"The log retention period in days."', args=[d.arg(name='retentionInDays', type=d.T.number)]),
        withRetentionInDays(retentionInDays): { retentionInDays: retentionInDays },
      },
      '#intrusionDetection':: d.obj(help='"A intrusion_detection block as defined below."'),
      intrusionDetection: {
        '#signatureOverrides':: d.obj(help='"One or more signature_overrides blocks as defined below."'),
        signatureOverrides: {
          '#withId':: d.fn(help='"12-digit number (id) which identifies your signature."', args=[d.arg(name='id', type=d.T.string)]),
          withId(id): { id: id },
          '#withState':: d.fn(help='"state can be any of Off, Alert or Deny."', args=[d.arg(name='state', type=d.T.string)]),
          withState(state): { state: state },
        },
        '#trafficBypass':: d.obj(help='"One or more traffic_bypass blocks as defined below."'),
        trafficBypass: {
          '#withDescription':: d.fn(help='"The description for this bypass traffic setting."', args=[d.arg(name='description', type=d.T.string)]),
          withDescription(description): { description: description },
          '#withDestinationAddresses':: d.fn(help='"Specifies a list of destination IP addresses that shall be bypassed by intrusion detection."', args=[d.arg(name='destinationAddresses', type=d.T.array)]),
          withDestinationAddresses(destinationAddresses): { destinationAddresses: if std.isArray(v=destinationAddresses) then destinationAddresses else [destinationAddresses] },
          '#withDestinationAddressesMixin':: d.fn(help='"Specifies a list of destination IP addresses that shall be bypassed by intrusion detection."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='destinationAddresses', type=d.T.array)]),
          withDestinationAddressesMixin(destinationAddresses): { destinationAddresses+: if std.isArray(v=destinationAddresses) then destinationAddresses else [destinationAddresses] },
          '#withDestinationIpGroups':: d.fn(help='"Specifies a list of destination IP groups that shall be bypassed by intrusion detection."', args=[d.arg(name='destinationIpGroups', type=d.T.array)]),
          withDestinationIpGroups(destinationIpGroups): { destinationIpGroups: if std.isArray(v=destinationIpGroups) then destinationIpGroups else [destinationIpGroups] },
          '#withDestinationIpGroupsMixin':: d.fn(help='"Specifies a list of destination IP groups that shall be bypassed by intrusion detection."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='destinationIpGroups', type=d.T.array)]),
          withDestinationIpGroupsMixin(destinationIpGroups): { destinationIpGroups+: if std.isArray(v=destinationIpGroups) then destinationIpGroups else [destinationIpGroups] },
          '#withDestinationPorts':: d.fn(help='"Specifies a list of destination IP ports that shall be bypassed by intrusion detection."', args=[d.arg(name='destinationPorts', type=d.T.array)]),
          withDestinationPorts(destinationPorts): { destinationPorts: if std.isArray(v=destinationPorts) then destinationPorts else [destinationPorts] },
          '#withDestinationPortsMixin':: d.fn(help='"Specifies a list of destination IP ports that shall be bypassed by intrusion detection."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='destinationPorts', type=d.T.array)]),
          withDestinationPortsMixin(destinationPorts): { destinationPorts+: if std.isArray(v=destinationPorts) then destinationPorts else [destinationPorts] },
          '#withName':: d.fn(help='"The name which should be used for this bypass traffic setting."', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { name: name },
          '#withProtocol':: d.fn(help='"The protocols any of ANY, TCP, ICMP, UDP that shall be bypassed by intrusion detection."', args=[d.arg(name='protocol', type=d.T.string)]),
          withProtocol(protocol): { protocol: protocol },
          '#withSourceAddresses':: d.fn(help='"Specifies a list of source addresses that shall be bypassed by intrusion detection."', args=[d.arg(name='sourceAddresses', type=d.T.array)]),
          withSourceAddresses(sourceAddresses): { sourceAddresses: if std.isArray(v=sourceAddresses) then sourceAddresses else [sourceAddresses] },
          '#withSourceAddressesMixin':: d.fn(help='"Specifies a list of source addresses that shall be bypassed by intrusion detection."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sourceAddresses', type=d.T.array)]),
          withSourceAddressesMixin(sourceAddresses): { sourceAddresses+: if std.isArray(v=sourceAddresses) then sourceAddresses else [sourceAddresses] },
          '#withSourceIpGroups':: d.fn(help='"Specifies a list of source IP groups that shall be bypassed by intrusion detection."', args=[d.arg(name='sourceIpGroups', type=d.T.array)]),
          withSourceIpGroups(sourceIpGroups): { sourceIpGroups: if std.isArray(v=sourceIpGroups) then sourceIpGroups else [sourceIpGroups] },
          '#withSourceIpGroupsMixin':: d.fn(help='"Specifies a list of source IP groups that shall be bypassed by intrusion detection."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sourceIpGroups', type=d.T.array)]),
          withSourceIpGroupsMixin(sourceIpGroups): { sourceIpGroups+: if std.isArray(v=sourceIpGroups) then sourceIpGroups else [sourceIpGroups] },
        },
        '#withMode':: d.fn(help='"In which mode you want to run intrusion detection: Off, Alert or Deny."', args=[d.arg(name='mode', type=d.T.string)]),
        withMode(mode): { mode: mode },
        '#withSignatureOverrides':: d.fn(help='"One or more signature_overrides blocks as defined below."', args=[d.arg(name='signatureOverrides', type=d.T.array)]),
        withSignatureOverrides(signatureOverrides): { signatureOverrides: if std.isArray(v=signatureOverrides) then signatureOverrides else [signatureOverrides] },
        '#withSignatureOverridesMixin':: d.fn(help='"One or more signature_overrides blocks as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='signatureOverrides', type=d.T.array)]),
        withSignatureOverridesMixin(signatureOverrides): { signatureOverrides+: if std.isArray(v=signatureOverrides) then signatureOverrides else [signatureOverrides] },
        '#withTrafficBypass':: d.fn(help='"One or more traffic_bypass blocks as defined below."', args=[d.arg(name='trafficBypass', type=d.T.array)]),
        withTrafficBypass(trafficBypass): { trafficBypass: if std.isArray(v=trafficBypass) then trafficBypass else [trafficBypass] },
        '#withTrafficBypassMixin':: d.fn(help='"One or more traffic_bypass blocks as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='trafficBypass', type=d.T.array)]),
        withTrafficBypassMixin(trafficBypass): { trafficBypass+: if std.isArray(v=trafficBypass) then trafficBypass else [trafficBypass] },
      },
      '#resourceGroupNameRef':: d.obj(help='"Reference to a ResourceGroup in azure to populate resourceGroupName."'),
      resourceGroupNameRef: {
        '#policy':: d.obj(help='"Policies for referencing."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { forProvider+: { resourceGroupNameRef+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { forProvider+: { resourceGroupNameRef+: { policy+: { resolve: resolve } } } } },
        },
        '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { forProvider+: { resourceGroupNameRef+: { name: name } } } },
      },
      '#resourceGroupNameSelector':: d.obj(help='"Selector for a ResourceGroup in azure to populate resourceGroupName."'),
      resourceGroupNameSelector: {
        '#policy':: d.obj(help='"Policies for selection."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { forProvider+: { resourceGroupNameSelector+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { forProvider+: { resourceGroupNameSelector+: { policy+: { resolve: resolve } } } } },
        },
        '#withMatchControllerRef':: d.fn(help='"MatchControllerRef ensures an object with the same controller reference as the selecting object is selected."', args=[d.arg(name='matchControllerRef', type=d.T.boolean)]),
        withMatchControllerRef(matchControllerRef): { spec+: { forProvider+: { resourceGroupNameSelector+: { matchControllerRef: matchControllerRef } } } },
        '#withMatchLabels':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabels(matchLabels): { spec+: { forProvider+: { resourceGroupNameSelector+: { matchLabels: matchLabels } } } },
        '#withMatchLabelsMixin':: d.fn(help='"MatchLabels ensures an object with matching labels is selected."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='matchLabels', type=d.T.object)]),
        withMatchLabelsMixin(matchLabels): { spec+: { forProvider+: { resourceGroupNameSelector+: { matchLabels+: matchLabels } } } },
      },
      '#threatIntelligenceAllowlist':: d.obj(help='"A threat_intelligence_allowlist block as defined below."'),
      threatIntelligenceAllowlist: {
        '#withFqdns':: d.fn(help='"A list of FQDNs that will be skipped for threat detection."', args=[d.arg(name='fqdns', type=d.T.array)]),
        withFqdns(fqdns): { fqdns: if std.isArray(v=fqdns) then fqdns else [fqdns] },
        '#withFqdnsMixin':: d.fn(help='"A list of FQDNs that will be skipped for threat detection."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fqdns', type=d.T.array)]),
        withFqdnsMixin(fqdns): { fqdns+: if std.isArray(v=fqdns) then fqdns else [fqdns] },
        '#withIpAddresses':: d.fn(help='"A list of IP addresses or CIDR ranges that will be skipped for threat detection."', args=[d.arg(name='ipAddresses', type=d.T.array)]),
        withIpAddresses(ipAddresses): { ipAddresses: if std.isArray(v=ipAddresses) then ipAddresses else [ipAddresses] },
        '#withIpAddressesMixin':: d.fn(help='"A list of IP addresses or CIDR ranges that will be skipped for threat detection."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ipAddresses', type=d.T.array)]),
        withIpAddressesMixin(ipAddresses): { ipAddresses+: if std.isArray(v=ipAddresses) then ipAddresses else [ipAddresses] },
      },
      '#tlsCertificate':: d.obj(help='"A tls_certificate block as defined below."'),
      tlsCertificate: {
        '#withKeyVaultSecretId':: d.fn(help='"The ID of the Key Vault, where the secret or certificate is stored."', args=[d.arg(name='keyVaultSecretId', type=d.T.string)]),
        withKeyVaultSecretId(keyVaultSecretId): { keyVaultSecretId: keyVaultSecretId },
        '#withName':: d.fn(help='"The name of the certificate."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { name: name },
      },
      '#withBasePolicyId':: d.fn(help='"The ID of the base Firewall Policy."', args=[d.arg(name='basePolicyId', type=d.T.string)]),
      withBasePolicyId(basePolicyId): { spec+: { forProvider+: { basePolicyId: basePolicyId } } },
      '#withDns':: d.fn(help='"A dns block as defined below."', args=[d.arg(name='dns', type=d.T.array)]),
      withDns(dns): { spec+: { forProvider+: { dns: if std.isArray(v=dns) then dns else [dns] } } },
      '#withDnsMixin':: d.fn(help='"A dns block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='dns', type=d.T.array)]),
      withDnsMixin(dns): { spec+: { forProvider+: { dns+: if std.isArray(v=dns) then dns else [dns] } } },
      '#withIdentity':: d.fn(help='"An identity block as defined below."', args=[d.arg(name='identity', type=d.T.array)]),
      withIdentity(identity): { spec+: { forProvider+: { identity: if std.isArray(v=identity) then identity else [identity] } } },
      '#withIdentityMixin':: d.fn(help='"An identity block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='identity', type=d.T.array)]),
      withIdentityMixin(identity): { spec+: { forProvider+: { identity+: if std.isArray(v=identity) then identity else [identity] } } },
      '#withInsights':: d.fn(help='"An insights block as defined below."', args=[d.arg(name='insights', type=d.T.array)]),
      withInsights(insights): { spec+: { forProvider+: { insights: if std.isArray(v=insights) then insights else [insights] } } },
      '#withInsightsMixin':: d.fn(help='"An insights block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='insights', type=d.T.array)]),
      withInsightsMixin(insights): { spec+: { forProvider+: { insights+: if std.isArray(v=insights) then insights else [insights] } } },
      '#withIntrusionDetection':: d.fn(help='"A intrusion_detection block as defined below."', args=[d.arg(name='intrusionDetection', type=d.T.array)]),
      withIntrusionDetection(intrusionDetection): { spec+: { forProvider+: { intrusionDetection: if std.isArray(v=intrusionDetection) then intrusionDetection else [intrusionDetection] } } },
      '#withIntrusionDetectionMixin':: d.fn(help='"A intrusion_detection block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='intrusionDetection', type=d.T.array)]),
      withIntrusionDetectionMixin(intrusionDetection): { spec+: { forProvider+: { intrusionDetection+: if std.isArray(v=intrusionDetection) then intrusionDetection else [intrusionDetection] } } },
      '#withLocation':: d.fn(help='"The Azure Region where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created."', args=[d.arg(name='location', type=d.T.string)]),
      withLocation(location): { spec+: { forProvider+: { location: location } } },
      '#withPrivateIpRanges':: d.fn(help='"A list of private IP ranges to which traffic will not be SNAT."', args=[d.arg(name='privateIpRanges', type=d.T.array)]),
      withPrivateIpRanges(privateIpRanges): { spec+: { forProvider+: { privateIpRanges: if std.isArray(v=privateIpRanges) then privateIpRanges else [privateIpRanges] } } },
      '#withPrivateIpRangesMixin':: d.fn(help='"A list of private IP ranges to which traffic will not be SNAT."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='privateIpRanges', type=d.T.array)]),
      withPrivateIpRangesMixin(privateIpRanges): { spec+: { forProvider+: { privateIpRanges+: if std.isArray(v=privateIpRanges) then privateIpRanges else [privateIpRanges] } } },
      '#withResourceGroupName':: d.fn(help='"The name of the Resource Group where the Firewall Policy should exist. Changing this forces a new Firewall Policy to be created."', args=[d.arg(name='resourceGroupName', type=d.T.string)]),
      withResourceGroupName(resourceGroupName): { spec+: { forProvider+: { resourceGroupName: resourceGroupName } } },
      '#withSku':: d.fn(help='"The SKU Tier of the Firewall Policy. Possible values are Standard, Premium. Changing this forces a new Firewall Policy to be created."', args=[d.arg(name='sku', type=d.T.string)]),
      withSku(sku): { spec+: { forProvider+: { sku: sku } } },
      '#withTags':: d.fn(help='"A mapping of tags which should be assigned to the Firewall Policy."', args=[d.arg(name='tags', type=d.T.object)]),
      withTags(tags): { spec+: { forProvider+: { tags: tags } } },
      '#withTagsMixin':: d.fn(help='"A mapping of tags which should be assigned to the Firewall Policy."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tags', type=d.T.object)]),
      withTagsMixin(tags): { spec+: { forProvider+: { tags+: tags } } },
      '#withThreatIntelligenceAllowlist':: d.fn(help='"A threat_intelligence_allowlist block as defined below."', args=[d.arg(name='threatIntelligenceAllowlist', type=d.T.array)]),
      withThreatIntelligenceAllowlist(threatIntelligenceAllowlist): { spec+: { forProvider+: { threatIntelligenceAllowlist: if std.isArray(v=threatIntelligenceAllowlist) then threatIntelligenceAllowlist else [threatIntelligenceAllowlist] } } },
      '#withThreatIntelligenceAllowlistMixin':: d.fn(help='"A threat_intelligence_allowlist block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='threatIntelligenceAllowlist', type=d.T.array)]),
      withThreatIntelligenceAllowlistMixin(threatIntelligenceAllowlist): { spec+: { forProvider+: { threatIntelligenceAllowlist+: if std.isArray(v=threatIntelligenceAllowlist) then threatIntelligenceAllowlist else [threatIntelligenceAllowlist] } } },
      '#withThreatIntelligenceMode':: d.fn(help='"The operation mode for Threat Intelligence. Possible values are Alert, Deny and Off. Defaults to Alert."', args=[d.arg(name='threatIntelligenceMode', type=d.T.string)]),
      withThreatIntelligenceMode(threatIntelligenceMode): { spec+: { forProvider+: { threatIntelligenceMode: threatIntelligenceMode } } },
      '#withTlsCertificate':: d.fn(help='"A tls_certificate block as defined below."', args=[d.arg(name='tlsCertificate', type=d.T.array)]),
      withTlsCertificate(tlsCertificate): { spec+: { forProvider+: { tlsCertificate: if std.isArray(v=tlsCertificate) then tlsCertificate else [tlsCertificate] } } },
      '#withTlsCertificateMixin':: d.fn(help='"A tls_certificate block as defined below."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tlsCertificate', type=d.T.array)]),
      withTlsCertificateMixin(tlsCertificate): { spec+: { forProvider+: { tlsCertificate+: if std.isArray(v=tlsCertificate) then tlsCertificate else [tlsCertificate] } } },
    },
    '#providerConfigRef':: d.obj(help='"ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured."'),
    providerConfigRef: {
      '#policy':: d.obj(help='"Policies for referencing."'),
      policy: {
        '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
        withResolution(resolution): { spec+: { providerConfigRef+: { policy+: { resolution: resolution } } } },
        '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
        withResolve(resolve): { spec+: { providerConfigRef+: { policy+: { resolve: resolve } } } },
      },
      '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { providerConfigRef+: { name: name } } },
    },
    '#providerRef':: d.obj(help='"ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`"'),
    providerRef: {
      '#policy':: d.obj(help='"Policies for referencing."'),
      policy: {
        '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
        withResolution(resolution): { spec+: { providerRef+: { policy+: { resolution: resolution } } } },
        '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
        withResolve(resolve): { spec+: { providerRef+: { policy+: { resolve: resolve } } } },
      },
      '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { providerRef+: { name: name } } },
    },
    '#publishConnectionDetailsTo':: d.obj(help='"PublishConnectionDetailsTo specifies the connection secret config which contains a name, metadata and a reference to secret store config to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource."'),
    publishConnectionDetailsTo: {
      '#configRef':: d.obj(help='"SecretStoreConfigRef specifies which secret store config should be used for this ConnectionSecret."'),
      configRef: {
        '#policy':: d.obj(help='"Policies for referencing."'),
        policy: {
          '#withResolution':: d.fn(help="\"Resolution specifies whether resolution of this reference is required. The default is 'Required', which means the reconcile will fail if the reference cannot be resolved. 'Optional' means this reference will be a no-op if it cannot be resolved.\"", args=[d.arg(name='resolution', type=d.T.string)]),
          withResolution(resolution): { spec+: { publishConnectionDetailsTo+: { configRef+: { policy+: { resolution: resolution } } } } },
          '#withResolve':: d.fn(help="\"Resolve specifies when this reference should be resolved. The default is 'IfNotPresent', which will attempt to resolve the reference only when the corresponding field is not present. Use 'Always' to resolve the reference on every reconcile.\"", args=[d.arg(name='resolve', type=d.T.string)]),
          withResolve(resolve): { spec+: { publishConnectionDetailsTo+: { configRef+: { policy+: { resolve: resolve } } } } },
        },
        '#withName':: d.fn(help='"Name of the referenced object."', args=[d.arg(name='name', type=d.T.string)]),
        withName(name): { spec+: { publishConnectionDetailsTo+: { configRef+: { name: name } } } },
      },
      '#metadata':: d.obj(help='"Metadata is the metadata for connection secret."'),
      metadata: {
        '#withAnnotations':: d.fn(help='"Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.annotations\\". - It is up to Secret Store implementation for others store types."', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotations(annotations): { spec+: { publishConnectionDetailsTo+: { metadata+: { annotations: annotations } } } },
        '#withAnnotationsMixin':: d.fn(help='"Annotations are the annotations to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.annotations\\". - It is up to Secret Store implementation for others store types."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
        withAnnotationsMixin(annotations): { spec+: { publishConnectionDetailsTo+: { metadata+: { annotations+: annotations } } } },
        '#withLabels':: d.fn(help='"Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.labels\\". - It is up to Secret Store implementation for others store types."', args=[d.arg(name='labels', type=d.T.object)]),
        withLabels(labels): { spec+: { publishConnectionDetailsTo+: { metadata+: { labels: labels } } } },
        '#withLabelsMixin':: d.fn(help='"Labels are the labels/tags to be added to connection secret. - For Kubernetes secrets, this will be used as \\"metadata.labels\\". - It is up to Secret Store implementation for others store types."\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
        withLabelsMixin(labels): { spec+: { publishConnectionDetailsTo+: { metadata+: { labels+: labels } } } },
        '#withType':: d.fn(help='"Type is the SecretType for the connection secret. - Only valid for Kubernetes Secret Stores."', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { spec+: { publishConnectionDetailsTo+: { metadata+: { type: type } } } },
      },
      '#withName':: d.fn(help='"Name is the name of the connection secret."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { publishConnectionDetailsTo+: { name: name } } },
    },
    '#withDeletionPolicy':: d.fn(help='"DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either \\"Delete\\" or \\"Orphan\\" the external resource."', args=[d.arg(name='deletionPolicy', type=d.T.string)]),
    withDeletionPolicy(deletionPolicy): { spec+: { deletionPolicy: deletionPolicy } },
    '#writeConnectionSecretToRef':: d.obj(help='"WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource. This field is planned to be replaced in a future release in favor of PublishConnectionDetailsTo. Currently, both could be set independently and connection details would be published to both without affecting each other."'),
    writeConnectionSecretToRef: {
      '#withName':: d.fn(help='"Name of the secret."', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { spec+: { writeConnectionSecretToRef+: { name: name } } },
      '#withNamespace':: d.fn(help='"Namespace of the secret."', args=[d.arg(name='namespace', type=d.T.string)]),
      withNamespace(namespace): { spec+: { writeConnectionSecretToRef+: { namespace: namespace } } },
    },
  },
  '#mixin': 'ignore',
  mixin: self,
}
